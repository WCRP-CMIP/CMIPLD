name: 'Build MkDocs Documentation'
description: 'Build MkDocs documentation with Material theme support'
author: 'CMIP-IPO'

inputs:
  build_dir:
    description: 'Directory to output the build'
    required: false
    default: '.src/mkdocs/site'
  config_file:
    description: 'Path to mkdocs.yml config file'
    required: false
    default: '.src/mkdocs/mkdocs.yml'
  python_version:
    description: 'Python version to use'
    required: false
    default: '3.11'
  upload_artifact:
    description: 'Whether to upload build as artifact'
    required: false
    default: 'true'
  artifact_name:
    description: 'Name for the uploaded artifact'
    required: false
    default: 'mkdocs-build'
  deploy_to_production:
    description: 'Deploy built site to production branch as docs folder'
    required: false
    default: 'false'
  production_branch:
    description: 'Production branch name to deploy to'
    required: false
    default: 'production'
  docs_folder:
    description: 'Folder name in production branch for documentation'
    required: false
    default: 'docs'

outputs:
  build_path:
    description: 'Path to the built documentation'
    value: ${{ steps.build.outputs.build_path }}
  artifact_name:
    description: 'Name of the uploaded artifact'
    value: ${{ inputs.artifact_name }}

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python_version }}

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-mkdocs-${{ hashFiles('.src/mkdocs/requirements.txt', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-mkdocs-
          ${{ runner.os }}-pip-

    - name: Install MkDocs dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        
        # Try multiple requirements file locations
        if [ -f ".src/mkdocs/requirements.txt" ]; then
          echo "📦 Installing from .src/mkdocs/requirements.txt"
          pip install -r .src/mkdocs/requirements.txt
        elif [ -f "requirements.txt" ]; then
          echo "📦 Installing from requirements.txt"
          pip install -r requirements.txt
        elif [ -f "docs/requirements.txt" ]; then
          echo "📦 Installing from docs/requirements.txt"
          pip install -r docs/requirements.txt
        else
          echo "📦 Installing default MkDocs packages"
          pip install mkdocs mkdocs-material mkdocs-plotly-plugin mkdocs-gen-files mkdocs-literate-nav
        fi
        
        # Install additional packages that are commonly needed
        pip install pymdown-extensions mkdocs-mermaid2-plugin || true

    - name: Verify MkDocs config
      shell: bash
      run: |
        if [ ! -f "${{ inputs.config_file }}" ]; then
          echo "❌ MkDocs config file not found: ${{ inputs.config_file }}"
          echo "📁 Available files in .src/mkdocs/:"
          find .src/mkdocs/ -type f -name "*.yml" -o -name "*.yaml" | head -10 || echo "No .src/mkdocs/ directory found"
          echo "📁 Available files in root:"
          find . -maxdepth 2 -name "mkdocs.yml" -o -name "mkdocs.yaml" | head -5
          exit 1
        fi
        echo "✅ Found MkDocs config: ${{ inputs.config_file }}"
        
        # Try MkDocs config validation instead of basic YAML
        echo "🔍 Validating MkDocs configuration..."
        python -c "import mkdocs.config; mkdocs.config.load_config('${{ inputs.config_file }}')" || {
          echo "❌ Invalid MkDocs configuration"
          exit 1
        }
        echo "✅ MkDocs configuration is valid"

    - name: Run pre-build scripts
      shell: bash
      run: |
        # Run any Python scripts in the scripts directory
        for script_dir in ".src/mkdocs/scripts" "scripts" "docs/scripts"; do
          if [ -d "$script_dir" ]; then
            echo "🔧 Running pre-build scripts from $script_dir..."
            for script in "$script_dir"/*.py; do
              if [ -f "$script" ]; then
                echo "▶️ Running: $script"
                python "$script" || echo "⚠️ Script $script failed but continuing..."
              fi
            done
          fi
        done

    - name: Build MkDocs documentation
      id: build
      shell: bash
      run: |
        echo "🏗️ Building MkDocs documentation..."
        echo "📄 Config: ${{ inputs.config_file }}"
        echo "📁 Output: ${{ inputs.build_dir }}"
        
        # Create output directory if it doesn't exist
        mkdir -p "$(dirname "${{ inputs.build_dir }}")"
        
        # Build with explicit output directory
        mkdocs build -f "${{ inputs.config_file }}" -d "${{ inputs.build_dir }}" --verbose
        
        # Verify build was successful
        if [ ! -d "${{ inputs.build_dir }}" ]; then
          echo "❌ Build directory not created: ${{ inputs.build_dir }}"
          echo "📁 Checking for alternative locations..."
          config_dir=$(dirname "${{ inputs.config_file }}")
          alt_locations=(
            "$config_dir/site"
            "$config_dir/build"
            "site"
            "build"
            "_site"
          )
          
          for location in "${alt_locations[@]}"; do
            if [ -d "$location" ]; then
              echo "✅ Found build at: $location"
              echo "Moving to expected location: ${{ inputs.build_dir }}"
              mv "$location" "${{ inputs.build_dir }}"
              break
            fi
          done
          
          if [ ! -d "${{ inputs.build_dir }}" ]; then
            echo "❌ No build directory found anywhere"
            exit 1
          fi
        fi
        
        if [ ! -f "${{ inputs.build_dir }}/index.html" ]; then
          echo "❌ No index.html found in build output"
          echo "📁 Build directory contents:"
          ls -la "${{ inputs.build_dir }}" || echo "Directory not accessible"
          exit 1
        fi
        
        echo "✅ MkDocs build completed successfully"
        echo "build_path=${{ inputs.build_dir }}" >> $GITHUB_OUTPUT

    - name: Upload build artifact
      if: inputs.upload_artifact == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ inputs.build_dir }}
        retention-days: 30
        compression-level: 6

    - name: Deploy to production branch
      if: inputs.deploy_to_production == 'true'
      shell: bash
      run: |
        echo "🚀 Deploying site folder to production branch as docs..."
        
        # Setup git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Setup production branch with worktree
        if git ls-remote --heads origin ${{ inputs.production_branch }} | grep -q ${{ inputs.production_branch }}; then
          echo "📥 Production branch exists, fetching..."
          git fetch origin ${{ inputs.production_branch }}
          git worktree add production-deploy origin/${{ inputs.production_branch }}
        else
          echo "🆕 Creating new production branch..."
          git worktree add --orphan production-deploy ${{ inputs.production_branch }}
          cd production-deploy
          git rm -rf . 2>/dev/null || true
          cd ..
        fi
        
        # Clear existing docs folder and copy site contents
        cd production-deploy
        echo "🗑️ Clearing existing ${{ inputs.docs_folder }}/ directory..."
        rm -rf ${{ inputs.docs_folder }}/ || true
        mkdir -p ${{ inputs.docs_folder }}/
        cd ..
        
        echo "📁 Copying site/* to production-deploy/${{ inputs.docs_folder }}/"
        cp -r ${{ inputs.build_dir }}/* production-deploy/${{ inputs.docs_folder }}/
        
        # Add GitHub Pages files
        if [ ! -f "production-deploy/.nojekyll" ]; then
          touch production-deploy/.nojekyll
          echo "📄 Added .nojekyll for GitHub Pages"
        fi
        
        # Add 404.html if it exists
        if [ -f "${{ inputs.build_dir }}/404.html" ] && [ ! -f "production-deploy/404.html" ]; then
          cp ${{ inputs.build_dir }}/404.html production-deploy/404.html
          echo "📄 Added 404.html"
        fi
        
        # Commit and push
        cd production-deploy
        git add .
        if [ -n "$(git status --porcelain)" ]; then
          git commit -m "📚 Deploy docs from MkDocs build - $(date +'%Y-%m-%d %H:%M:%S')"
          git push origin ${{ inputs.production_branch }}
          echo "✅ Documentation deployed to ${{ inputs.production_branch }}/${{ inputs.docs_folder }}/"
        else
          echo "ℹ️ No changes to deploy"
        fi
        
        cd ..
        git worktree remove production-deploy --force || true

    - name: Build summary
      shell: bash
      run: |
        echo "## 📚 MkDocs Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Config file**: \`${{ inputs.config_file }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Build directory**: \`${{ inputs.build_dir }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Python version**: \`${{ inputs.python_version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Build status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
        
        # Count files and calculate size
        if [ -d "${{ inputs.build_dir }}" ]; then
          file_count=$(find "${{ inputs.build_dir }}" -type f | wc -l)
          size=$(du -sh "${{ inputs.build_dir }}" | cut -f1)
          echo "- **Files generated**: \`$file_count\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Total size**: \`$size\`" >> $GITHUB_STEP_SUMMARY
          
          # List key files
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📄 Key Files Generated" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          find "${{ inputs.build_dir }}" -name "*.html" | head -10 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi

branding:
  icon: 'book-open'
  color: 'blue'

name: 'Build and Deploy MkDocs to Production Branch'
description: 'Build MkDocs on main branch, deploy to production branch using git worktree'
author: 'CMIP-IPO'

inputs:
  source_branch:
    description: 'Source branch to build from'
    required: false
    default: 'main'
  target_branch:
    description: 'Target branch to deploy to'
    required: false
    default: 'production'
  config_file:
    description: 'Path to mkdocs.yml config file'
    required: false
    default: '.src/mkdocs/mkdocs.yml'
  python_version:
    description: 'Python version to use'
    required: false
    default: '3.11'
  docs_dir:
    description: 'Directory name in target branch'
    required: false
    default: 'docs'
  site_dir:
    description: 'Directory where MkDocs builds the site (temporary build directory)'
    required: false
    default: '.src/mkdocs/site'

outputs:
  deployed_branch:
    description: 'Branch where docs were deployed'
    value: ${{ inputs.target_branch }}
  deployed_path:
    description: 'Path where docs were deployed'
    value: ${{ inputs.docs_dir }}

runs:
  using: 'composite'
  steps:

    - name: Fetch all branches
      shell: bash
      run: git fetch --all

    - name: Set up environment variables
      shell: bash
      run: |
        echo "REPO_ROOT=$(pwd)" >> $GITHUB_ENV
        echo "SITE_DIR_PATH=$(pwd)/${{ inputs.site_dir }}" >> $GITHUB_ENV
        echo "WORKTREE_PATH=$(pwd)/production-deploy" >> $GITHUB_ENV
        echo "📁 Repository root: $(pwd)"
        echo "📁 Site directory will be: $(pwd)/${{ inputs.site_dir }}"
        echo "📁 Worktree will be: $(pwd)/production-deploy"

    - name: Set up Git configuration
      shell: bash
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git config --global init.defaultBranch main

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python_version }}

    - name: Install MkDocs dependencies
      shell: bash
      run: |
        cd "${REPO_ROOT}"
        python -m pip install --upgrade pip
        
        # Install from requirements file if it exists
        if [ -f ".src/mkdocs/requirements.txt" ]; then
          echo "📦 Installing from .src/mkdocs/requirements.txt"
          pip install -r .src/mkdocs/requirements.txt
        else
          echo "📦 Installing default MkDocs packages"
          pip install mkdocs mkdocs-material mkdocs-plotly-plugin mkdocs-gen-files mkdocs-literate-nav pymdown-extensions
        fi

    - name: Verify MkDocs config
      shell: bash
      run: |
        cd "${REPO_ROOT}"
        if [ ! -f "${{ inputs.config_file }}" ]; then
          echo "❌ MkDocs config file not found: ${{ inputs.config_file }}"
          exit 1
        fi
        echo "✅ Found MkDocs config: ${{ inputs.config_file }}"

    - name: Build MkDocs
      shell: bash
      run: |
        cd "${REPO_ROOT}"
        echo "🏗️ Building MkDocs documentation..."
        echo "📁 Repository root: ${REPO_ROOT}"
        echo "📁 Building to directory: ${SITE_DIR_PATH}"
        
        # Clean any existing site directory
        if [ -d "${SITE_DIR_PATH}" ]; then
          echo "🧹 Cleaning existing site directory..."
          rm -rf "${SITE_DIR_PATH}"
        fi
        
        mkdocs build -f "${{ inputs.config_file }}" -d "${SITE_DIR_PATH}"
        
        # Verify build was successful
        if [ ! -d "${SITE_DIR_PATH}" ]; then
          echo "❌ Build failed - no site directory created at: ${SITE_DIR_PATH}"
          exit 1
        fi
        
        if [ ! -f "${SITE_DIR_PATH}/index.html" ]; then
          echo "❌ Build failed - no index.html in output directory: ${SITE_DIR_PATH}"
          exit 1
        fi
        
        echo "✅ MkDocs build completed successfully"
        echo "📊 Build summary:"
        echo "   - Output directory: ${SITE_DIR_PATH}"
        echo "   - Files generated: $(find "${SITE_DIR_PATH}" -type f | wc -l)"
        echo "   - Total size: $(du -sh "${SITE_DIR_PATH}" | cut -f1)"

    - name: Setup production branch with git worktree
      shell: bash
      run: |
        cd "${REPO_ROOT}"
        echo "🌿 Setting up production branch with git worktree..."
        echo "📁 Repository root: ${REPO_ROOT}"
        echo "📁 Worktree path: ${WORKTREE_PATH}"
        
        # Clean up any existing worktree first
        if [ -d "${WORKTREE_PATH}" ]; then
          echo "🧹 Cleaning up existing worktree..."
          git worktree remove "${WORKTREE_PATH}" --force 2>/dev/null || true
        fi
        
        # Check if production branch exists remotely
        if git ls-remote --heads origin ${{ inputs.target_branch }} | grep -q ${{ inputs.target_branch }}; then
          echo "📥 Production branch exists remotely, fetching..."
          git fetch origin ${{ inputs.target_branch }}
          
          # Check if local branch exists
          if git show-ref --verify --quiet refs/heads/${{ inputs.target_branch }}; then
            echo "📋 Local branch exists, updating..."
            git checkout ${{ inputs.target_branch }}
            git pull origin ${{ inputs.target_branch }}
            git worktree add "${WORKTREE_PATH}" ${{ inputs.target_branch }}
          else
            echo "📋 Creating local branch from remote..."
            git worktree add "${WORKTREE_PATH}" origin/${{ inputs.target_branch }} -b ${{ inputs.target_branch }}
          fi
          echo "BRANCH_EXISTS=true" >> $GITHUB_ENV
        else
          echo "🆕 Creating new production branch..."
          git worktree add --orphan "${WORKTREE_PATH}" ${{ inputs.target_branch }}
          cd "${WORKTREE_PATH}"
          git rm -rf . 2>/dev/null || true
          cd "${REPO_ROOT}"
          echo "BRANCH_EXISTS=false" >> $GITHUB_ENV
        fi
        
        echo "✅ Production branch worktree ready"

    - name: Deploy to production branch
      shell: bash
      run: |
        cd "${REPO_ROOT}"
        echo "📁 Deploying to production branch..."
        echo "📁 Source: ${SITE_DIR_PATH}"
        echo "📁 Target: ${WORKTREE_PATH}/${{ inputs.docs_dir }}"
        
        # Only clear the docs directory, keep everything else
        cd "${WORKTREE_PATH}"
        
        # Remove only the docs directory if it exists
        if [ -d "${{ inputs.docs_dir }}" ]; then
          echo "🗑️ Clearing existing ${{ inputs.docs_dir }}/ directory..."
          rm -rf "${{ inputs.docs_dir }}"
        fi
        
        cd "${REPO_ROOT}"
        
        # Create fresh docs directory and copy built site
        mkdir -p "${WORKTREE_PATH}/${{ inputs.docs_dir }}"
        cp -r "${SITE_DIR_PATH}"/* "${WORKTREE_PATH}/${{ inputs.docs_dir }}/"
        
        # Add .nojekyll file for GitHub Pages (only if it doesn't exist)
        if [ ! -f "${WORKTREE_PATH}/.nojekyll" ]; then
          touch "${WORKTREE_PATH}/.nojekyll"
        fi
        
        # Add 404.html if it exists in build (only if it doesn't exist)
        if [ -f "${SITE_DIR_PATH}/404.html" ] && [ ! -f "${WORKTREE_PATH}/404.html" ]; then
          cp "${SITE_DIR_PATH}/404.html" "${WORKTREE_PATH}/404.html"
        fi
        
        echo "✅ Files transferred to production branch ${{ inputs.docs_dir }}/ folder"

    - name: Commit and push to production
      shell: bash
      run: |
        cd "${WORKTREE_PATH}"
        echo "📤 Committing and pushing to production..."
        echo "📁 Working in: $(pwd)"
        echo "📋 Branch exists: ${BRANCH_EXISTS}"
        
        # Debug git status
        echo "🔍 Git status:"
        git status --porcelain
        echo "🔍 Current branch:"
        git branch --show-current
        echo "🔍 Remote tracking:"
        git branch -vv
        
        # Add all files
        git add .
        
        # Check if there are changes to commit or if this is a new branch
        if [ -n "$(git status --porcelain)" ] || [ "${BRANCH_EXISTS}" = "false" ]; then
          if [ "${BRANCH_EXISTS}" = "false" ]; then
            echo "🆕 Making initial commit for new branch"
            git commit -m "📚 Initial documentation deployment from ${{ inputs.source_branch }} - $(date +'%Y-%m-%d %H:%M:%S')"
          else
            echo "📝 Updating existing branch"
            git commit -m "📚 Deploy documentation from ${{ inputs.source_branch }} - $(date +'%Y-%m-%d %H:%M:%S')"
          fi
          
          # Ensure we're tracking the remote branch properly
          CURRENT_BRANCH=$(git branch --show-current)
          echo "🔗 Setting up remote tracking for branch: ${CURRENT_BRANCH}"
          git branch --set-upstream-to=origin/${{ inputs.target_branch }} "${CURRENT_BRANCH}" || true
          
          # Push to origin
          echo "🚀 Pushing to origin/${{ inputs.target_branch }}..."
          git push origin "${CURRENT_BRANCH}":${{ inputs.target_branch }}
          echo "✅ Documentation deployed to ${{ inputs.target_branch }} branch"
        else
          echo "ℹ️ No changes to deploy"
        fi

    - name: Cleanup worktree
      shell: bash
      run: |
        cd "${REPO_ROOT}"
        echo "🧹 Cleaning up worktree..."
        git worktree remove "${WORKTREE_PATH}" --force || true
        echo "✅ Worktree cleaned up"

    - name: Deployment summary
      shell: bash
      run: |
        cd "${REPO_ROOT}"
        echo "## 🎉 MkDocs Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Source branch**: \`${{ inputs.source_branch }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Target branch**: \`${{ inputs.target_branch }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Config file**: \`${{ inputs.config_file }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Site directory**: \`${{ inputs.site_dir }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Docs directory**: \`${{ inputs.docs_dir }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Deployment completed" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "${SITE_DIR_PATH}" ]; then
          file_count=$(find "${SITE_DIR_PATH}" -type f | wc -l)
          size=$(du -sh "${SITE_DIR_PATH}" | cut -f1)
          echo "- **Files deployed**: \`$file_count\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Total size**: \`$size\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation is now available on the \`${{ inputs.target_branch }}\` branch" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub Pages will automatically deploy from \`${{ inputs.target_branch }}/${{ inputs.docs_dir }}\`" >> $GITHUB_STEP_SUMMARY

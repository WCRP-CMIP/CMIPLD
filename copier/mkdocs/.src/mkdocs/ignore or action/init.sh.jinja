#!/bin/bash
# Initialization script for {{ project_name }}
# Generated by MkDocs Publisher Template

set -e

# Load configuration
source .src/mkdocs/.env

echo "ðŸš€ Initializing {{ project_name }}..."

# Check if we're in the right directory
if [[ ! -f ".src/mkdocs/mkdocs.yml" ]]; then
    log_error "Not in a valid MkDocs Publisher project directory"
    log_error "Expected to find .src/mkdocs/mkdocs.yml"
    exit 1
fi

# Create necessary directories
log_info "Creating directories..."
mkdir -p "$BUILD_PATH"
mkdir -p "$DOCS_PATH"
mkdir -p logs

# Check dependencies
log_info "Checking dependencies..."

if ! command -v python3 &> /dev/null; then
    log_error "Python 3 is required but not installed"
    exit 1
fi

if ! command -v git &> /dev/null; then
    log_error "Git is required but not installed"
    exit 1
fi

# Install Python dependencies
log_info "Installing Python dependencies..."
if [[ -f ".src/mkdocs/requirements.txt" ]]; then
    python3 -m pip install -r .src/mkdocs/requirements.txt
    log_success "Python dependencies installed"
else
    log_warning "No requirements.txt found, installing minimal dependencies"
    python3 -m pip install mkdocs-material mkdocs-minify-plugin mkdocs-git-revision-date-localized-plugin
fi

# Setup source repository
if [[ ! -d "$MIPCVS_WIKI_PATH" ]]; then
    log_info "Cloning source repository..."
    git clone "$MIPCVS_WIKI_REPO" "$MIPCVS_WIKI_PATH"
    log_success "Source repository cloned"
else
    log_info "Updating source repository..."
    cd "$MIPCVS_WIKI_PATH"
    git pull origin main || git pull origin master
    cd - > /dev/null
    log_success "Source repository updated"
fi

# Copy MkDocs configuration
log_info "Setting up MkDocs configuration..."
if [[ ! -f "mkdocs.yml" ]]; then
    cp ".src/mkdocs/mkdocs.yml" "mkdocs.yml"
    log_success "MkDocs configuration copied"
fi

# Generate initial content
log_info "Generating initial content..."
python3 .src/mkdocs/scripts/generate_content.py \
    --source "$MIPCVS_WIKI_PATH" \
    --target . \
    --verbose

log_success "Initial content generated"

# Set up development files
log_info "Setting up development environment..."

# Create .gitignore if it doesn't exist
if [[ ! -f ".gitignore" ]]; then
    cat > .gitignore << 'EOF'
# Build artifacts
/build/
/site/
/.mkdocs_cache/

# Python
__pycache__/
*.py[cod]
*$py.class
*.so

# Logs
*.log
logs/

# Environment
.env.local
.venv/
venv/

# OS
.DS_Store
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
*.swo

# Temporary files
*.tmp
*.temp
EOF
    log_success "Created .gitignore"
fi

# Create Makefile
if [[ ! -f "Makefile" ]]; then
    cp ".src/mkdocs/Makefile" "Makefile"
    log_success "Created Makefile"
fi

# Create development environment file
if [[ ! -f ".env.local" ]]; then
    cat > .env.local << 'EOF'
# Local environment overrides
# This file is ignored by git

# Uncomment to override default settings
# export LOG_LEVEL="DEBUG"
# export MIPCVS_WIKI_PATH="./mipcvs-wiki"
# export DEV_SERVER_PORT="8001"
EOF
    log_success "Created .env.local template"
fi

# Set permissions
chmod +x .src/mkdocs/deploy.sh
chmod +x .src/mkdocs/scripts/*.py

log_success "Permissions set"

# Run initial validation
log_info "Running initial validation..."
python3 .src/mkdocs/scripts/build.py --step validate

log_success "âœ¨ {{ project_name }} initialization completed!"
echo ""
log_info "Next steps:"
echo "  1. Review and customize mkdocs.yml"
echo "  2. Run 'make serve' to start development server"
echo "  3. Run 'make build' to build the site"
echo "  4. Run 'make deploy' to deploy to GitHub Pages"
echo ""
log_info "For help: make help"
log_info "For status: make status"

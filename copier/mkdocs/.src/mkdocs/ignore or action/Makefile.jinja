# Makefile for {{ project_name }}
# Generated by MkDocs Publisher Template

.PHONY: help install clean generate build serve deploy validate test

# Configuration
PYTHON := python3
MKDOCS := mkdocs
SOURCE_PATH := {{ source_path }}
TARGET_PATH := .
BUILD_PATH := {{ build_path }}
SCRIPTS_PATH := .src/mkdocs/scripts

# Default target
help: ## Show this help message
	@echo "{{ project_name }} - MkDocs Publisher"
	@echo ""
	@echo "Available targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}'

install: ## Install dependencies
	$(PYTHON) -m pip install -r .src/mkdocs/requirements.txt

clean: ## Clean build artifacts
	$(PYTHON) $(SCRIPTS_PATH)/build.py --step clean
	rm -rf $(BUILD_PATH)
	rm -rf .mkdocs_cache
	find . -name "*.pyc" -delete
	find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

generate: ## Generate content from source
	$(PYTHON) $(SCRIPTS_PATH)/generate_content.py \
		--source $(SOURCE_PATH) \
		--target $(TARGET_PATH) \
		--verbose

process: ## Process and enhance content
	$(PYTHON) $(SCRIPTS_PATH)/build.py --step process

validate: ## Validate content and links
	$(PYTHON) $(SCRIPTS_PATH)/build.py --step validate

build: ## Build the documentation site
	$(PYTHON) $(SCRIPTS_PATH)/build.py

serve: generate ## Serve the site locally
	$(MKDOCS) serve --dev-addr localhost:8000

build-mkdocs: ## Build with MkDocs directly
	$(MKDOCS) build --clean --strict

deploy: build ## Deploy to GitHub Pages
	$(MKDOCS) gh-deploy --force

deploy-script: ## Deploy using the deployment script
	chmod +x .src/mkdocs/deploy.sh
	./.src/mkdocs/deploy.sh

quick-build: clean generate build ## Quick full rebuild

full-pipeline: clean install generate process validate build ## Run complete pipeline

test: ## Run tests and validation
	$(PYTHON) $(SCRIPTS_PATH)/build.py --step validate --strict
	$(MKDOCS) build --clean --strict

dev: ## Start development mode (watch for changes)
	$(PYTHON) $(SCRIPTS_PATH)/generate_content.py \
		--source $(SOURCE_PATH) \
		--target $(TARGET_PATH) \
		--no-clean
	$(MKDOCS) serve --dev-addr localhost:8000 --livereload

update-source: ## Update source repository
	@if [ -d "$(SOURCE_PATH)" ]; then \
		echo "Updating source repository..."; \
		cd $(SOURCE_PATH) && git pull; \
	else \
		echo "Cloning source repository..."; \
		git clone https://github.com/cmip-ipo/mipcvs-wiki.git $(SOURCE_PATH); \
	fi

check-deps: ## Check if all dependencies are installed
	@echo "Checking dependencies..."
	@$(PYTHON) --version
	@$(MKDOCS) --version
	@git --version
	@echo "All dependencies are available!"

info: ## Show configuration information
	@echo "{{ project_name }} Configuration:"
	@echo "  Source Path: $(SOURCE_PATH)"
	@echo "  Target Path: $(TARGET_PATH)"
	@echo "  Build Path: $(BUILD_PATH)"
	@echo "  Python: $(PYTHON)"
	@echo "  MkDocs: $(MKDOCS)"
	@echo "  Site URL: {{ site_url }}"
	@echo "  Repo URL: {{ repo_url }}"

# Development shortcuts
dev-install: ## Install development dependencies
	$(PYTHON) -m pip install -r .src/mkdocs/requirements.txt
	$(PYTHON) -m pip install black flake8 mypy pytest

lint: ## Run code linting
	@if command -v black >/dev/null 2>&1; then \
		black .src/mkdocs/scripts/; \
	fi
	@if command -v flake8 >/dev/null 2>&1; then \
		flake8 .src/mkdocs/scripts/; \
	fi

format: ## Format code
	@if command -v black >/dev/null 2>&1; then \
		black .src/mkdocs/scripts/; \
		echo "Code formatted with black"; \
	else \
		echo "black not installed, skipping formatting"; \
	fi

# CI/CD targets
ci-build: install generate validate build ## CI build pipeline
ci-test: install generate validate test ## CI test pipeline
ci-deploy: ci-build deploy ## CI deployment pipeline

# Cleanup targets
clean-all: clean ## Clean everything including source
	rm -rf $(SOURCE_PATH)

reset: clean-all update-source ## Reset to clean state

# Status and debugging
status: ## Show current status
	@echo "=== {{ project_name }} Status ==="
	@echo "Generated docs exist: $$([ -d 'docs' ] && echo 'Yes' || echo 'No')"
	@echo "Built site exists: $$([ -d '$(BUILD_PATH)' ] && echo 'Yes' || echo 'No')"
	@echo "Source repo exists: $$([ -d '$(SOURCE_PATH)' ] && echo 'Yes' || echo 'No')"
	@echo "MkDocs config exists: $$([ -f 'mkdocs.yml' ] && echo 'Yes' || echo 'No')"
	@if [ -d 'docs' ]; then \
		echo "Documentation files: $$(find docs -name '*.md' | wc -l)"; \
	fi
	@if [ -d '$(BUILD_PATH)' ]; then \
		echo "Built HTML files: $$(find $(BUILD_PATH) -name '*.html' | wc -l)"; \
	fi

debug: ## Show debug information
	@echo "=== Debug Information ==="
	@echo "Working directory: $$(pwd)"
	@echo "Python path: $$(which $(PYTHON))"
	@echo "MkDocs path: $$(which $(MKDOCS))"
	@echo "Git path: $$(which git)"
	@echo ""
	@echo "Environment variables:"
	@env | grep -E "(PYTHON|MKDOCS|PATH)" | sort
	@echo ""
	@echo "Recent log entries:"
	@if [ -f "mkdocs_generation.log" ]; then \
		tail -10 mkdocs_generation.log; \
	else \
		echo "No log file found"; \
	fi

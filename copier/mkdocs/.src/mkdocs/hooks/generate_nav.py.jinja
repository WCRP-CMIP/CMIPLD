#!/usr/bin/env python3
"""
MkDocs hook to generate SUMMARY.md before build
Also processes src-data folder if it exists
Add to mkdocs.yml:
hooks:
  - hooks/generate_nav.py
"""

import os
from pathlib import Path
import re

# Import the src-data processor
import sys
sys.path.append(str(Path(__file__).parent.parent / "scripts"))

try:
    from process_src_data import process_src_data
    HAS_SRC_DATA_PROCESSOR = True
except ImportError:
    HAS_SRC_DATA_PROCESSOR = False
    print("‚ö†Ô∏è  Could not import process_src_data module")

def on_config(config):
    """Run before build starts - DON'T generate nav here."""
    print("üîß Navigation hook loaded")
    return config

def on_files(files, config):
    """Run after files are collected but before build."""
    # Still too early - gen-files hasn't run yet
    return files

def on_nav(nav, config, files):
    """Run after navigation is created - gen-files has run by now."""
    print("üîß Generating navigation after all files are created...")
    
    docs_dir = config['docs_dir']
    generate_summary_for_docs(docs_dir)
    
    # Force reload of navigation
    return None  # Returning None forces MkDocs to reload nav from files

def clean_title(filename):
    """Clean filename for display."""
    name = filename.replace('.md', '')
    name = re.sub(r'^\d+[-_.](?=\w)', '', name)
    return name.replace('_', ' ').replace('-', ' ').title()

def get_sort_key(filename):
    """Get sort key for ordering."""
    match = re.match(r'^(\d+)[-_.]', filename)
    if match:
        return (int(match.group(1)), filename)
    return (0, filename)

def generate_summary_for_docs(docs_dir):
    """Generate SUMMARY.md file."""
    docs_path = Path(docs_dir)
    
    # Collect all markdown files
    files_by_dir = {}
    
    for md_file in docs_path.rglob("*.md"):
        # Skip hidden files and SUMMARY.md
        if any(part.startswith('.') for part in md_file.parts):
            continue
        if md_file.name == "SUMMARY.md":
            continue
        if md_file.name.startswith("_"):  # Skip _nav_debug.md etc
            continue
            
        rel_path = md_file.relative_to(docs_path)
        parts = list(rel_path.parts)
        
        if len(parts) == 1:
            # Top-level file
            if 'ROOT' not in files_by_dir:
                files_by_dir['ROOT'] = []
            files_by_dir['ROOT'].append(md_file)
        else:
            # File in subdirectory
            dir_name = parts[0]
            if dir_name not in files_by_dir:
                files_by_dir[dir_name] = []
            files_by_dir[dir_name].append(md_file)
    
    # Generate navigation
    nav_lines = []
    
    # Add top-level files first
    if 'ROOT' in files_by_dir:
        # Sort by sort key
        root_files = sorted(files_by_dir['ROOT'], key=lambda f: get_sort_key(f.name))
        
        # Add index.md first if it exists
        for f in root_files:
            if f.name == 'index.md':
                nav_lines.append('- [Home](index.md)')
                root_files.remove(f)
                break
        
        # Add other root files
        for f in root_files:
            title = clean_title(f.name)
            nav_lines.append(f'- [{title}]({f.name})')
    
    # Add subdirectories
    for dir_name in sorted(files_by_dir.keys()):
        if dir_name == 'ROOT':
            continue
            
        # Add directory header
        dir_title = clean_title(dir_name)
        nav_lines.append(f'- {dir_title}:')
        
        # Add files in directory
        dir_files = sorted(files_by_dir[dir_name], key=lambda f: get_sort_key(f.name))
        for f in dir_files:
            rel_path = f.relative_to(docs_path)
            title = clean_title(f.name)
            nav_lines.append(f'  - [{title}]({str(rel_path).replace(os.sep, "/")})')
    
    # Add src-data documentation if it was generated
    src_data_docs = docs_path / 'src-data-docs'
    if src_data_docs.exists() and src_data_docs.is_dir():
        nav_lines.append('- Source Data:')
        nav_lines.append('  - [Overview](src-data-docs/index.md)')
        
        # Add each src-data section
        for md_file in sorted(src_data_docs.glob('*.md')):
            if md_file.name != 'index.md' and not md_file.name.endswith('_contents.md'):
                section_name = md_file.stem
                nav_lines.append(f'  - [{clean_title(section_name)}](src-data-docs/{md_file.name})')
                
                # Add contents page if exists
                contents_file = src_data_docs / f'{section_name}_contents.md'
                if contents_file.exists():
                    nav_lines.append(f'    - [Contents](src-data-docs/{contents_file.name})')
    
    # Write SUMMARY.md
    summary_content = '\n'.join(nav_lines)
    summary_path = docs_path / 'SUMMARY.md'
    
    with open(summary_path, 'w') as f:
        f.write(summary_content)
    
    print(f"‚úÖ Generated {summary_path} with {len(nav_lines)} entries")

#!/usr/bin/env python3
"""
Debug version of navigation hook to troubleshoot missing pages
"""

import os
import re
from pathlib import Path

def on_config(config):
    """Log configuration."""
    print(f"üîç DEBUG: Hook loaded. Docs dir: {config['docs_dir']}")
    return config

def on_files(files, config):
    """Check what files MkDocs sees."""
    print(f"üîç DEBUG: MkDocs found {len(files)} files")
    for f in files:
        if 'src-data' in str(f.src_path):
            print(f"  - Virtual: {f.src_path}")
    return files

def on_env(env, config, files):
    """Generate navigation after all processing."""
    print("\nüîß DEBUG: Running navigation generation hook...")
    print(f"  - Working directory: {os.getcwd()}")
    print(f"  - Docs directory: {config['docs_dir']}")
    print(f"  - Site directory: {config['site_dir']}")
    
    docs_dir = Path(config['docs_dir'])
    print(f"  - Docs path absolute: {docs_dir.absolute()}")
    print(f"  - Docs path exists: {docs_dir.exists()}")
    
    # Check what files exist
    if docs_dir.exists():
        all_files = list(docs_dir.rglob("*.md"))
        print(f"\nüìÅ Found {len(all_files)} .md files in docs:")
        for f in sorted(all_files)[:20]:  # Show first 20
            print(f"  - {f.relative_to(docs_dir)}")
        if len(all_files) > 20:
            print(f"  ... and {len(all_files) - 20} more")
    
    # Check for src-data
    src_data_checks = [
        Path("src-data"),
        docs_dir.parent / "src-data",
        docs_dir.parent.parent / "src-data",
        Path.cwd() / "src-data"
    ]
    
    print("\nüîç Checking for src-data:")
    src_data_found = False
    for path in src_data_checks:
        exists = path.exists()
        print(f"  - {path}: {'‚úÖ EXISTS' if exists else '‚ùå not found'}")
        if exists:
            src_data_found = True
            subdirs = [d for d in path.iterdir() if d.is_dir() and not d.name.startswith('.')]
            print(f"    Found {len(subdirs)} subdirectories: {[d.name for d in subdirs]}")
    
    # Check virtual files
    print("\nüîç Checking MkDocs files object:")
    src_data_files = [f for f in files if 'src-data' in str(f.src_path)]
    print(f"  - Found {len(src_data_files)} src-data virtual files")
    for f in src_data_files[:10]:
        print(f"    - {f.src_path}")
    
    # Generate navigation
    generate_navigation_debug(docs_dir, src_data_found)
    
    return env

def generate_navigation_debug(docs_path, has_src_data):
    """Generate SUMMARY.md with debug info."""
    nav_lines = ["<!-- DEBUG Navigation Generated -->"]
    nav_lines.append(f"<!-- Docs path: {docs_path.absolute()} -->")
    nav_lines.append(f"<!-- Has src-data: {has_src_data} -->")
    nav_lines.append("")
    
    # Collect files
    files_by_dir = {}
    
    for md_file in docs_path.rglob("*.md"):
        if any(part.startswith('.') for part in md_file.parts):
            continue
        if md_file.name == "SUMMARY.md" or md_file.name.startswith("_"):
            continue
            
        rel_path = md_file.relative_to(docs_path)
        parts = list(rel_path.parts)
        
        if len(parts) == 1:
            if 'ROOT' not in files_by_dir:
                files_by_dir['ROOT'] = []
            files_by_dir['ROOT'].append(md_file)
        else:
            dir_name = parts[0]
            if dir_name not in files_by_dir:
                files_by_dir[dir_name] = []
            files_by_dir[dir_name].append(md_file)
    
    print(f"\nüìä Files by directory:")
    for dir_name, files in files_by_dir.items():
        print(f"  - {dir_name}: {len(files)} files")
    
    # Generate navigation
    # Add top-level files
    if 'ROOT' in files_by_dir:
        root_files = sorted(files_by_dir['ROOT'], key=lambda f: f.name)
        
        for f in root_files:
            if f.name == 'index.md':
                nav_lines.append('- [Home](index.md)')
            else:
                title = f.stem.replace('-', ' ').replace('_', ' ').title()
                nav_lines.append(f'- [{title}]({f.name})')
    
    # Add subdirectories
    for dir_name in sorted(files_by_dir.keys()):
        if dir_name == 'ROOT':
            continue
            
        dir_title = dir_name.replace('-', ' ').replace('_', ' ').title()
        nav_lines.append(f'- {dir_title}:')
        
        for f in sorted(files_by_dir[dir_name], key=lambda f: f.name):
            rel_path = f.relative_to(docs_path)
            title = f.stem.replace('-', ' ').replace('_', ' ').title()
            nav_lines.append(f'  - [{title}]({str(rel_path).replace(os.sep, "/")})')
    
    # Force add src-data section if it should exist
    if has_src_data:
        nav_lines.append('- Source Data:')
        nav_lines.append('  - [Overview](src-data-docs/index.md)')
        nav_lines.append('  <!-- Note: src-data sections will be added here -->')
    
    # Write SUMMARY.md
    summary_content = '\n'.join(nav_lines)
    summary_path = docs_path / 'SUMMARY.md'
    
    print(f"\nüìù Writing SUMMARY.md to: {summary_path.absolute()}")
    print(f"   Total lines: {len(nav_lines)}")
    
    try:
        with open(summary_path, 'w') as f:
            f.write(summary_content)
        print("   ‚úÖ Write successful")
        
        # Verify it was written
        if summary_path.exists():
            print(f"   ‚úÖ File exists, size: {summary_path.stat().st_size} bytes")
        else:
            print("   ‚ùå File not found after writing!")
            
    except Exception as e:
        print(f"   ‚ùå Error writing: {e}")

def clean_title(filename):
    """Clean filename for display."""
    name = filename.replace('.md', '')
    name = re.sub(r'^\d+[-_.](?=\w)', '', name)
    return name.replace('_', ' ').replace('-', ' ').title()

def get_sort_key(filename):
    """Get sort key for ordering."""
    match = re.match(r'^(\d+)[-_.]', filename)
    if match:
        return (int(match.group(1)), filename)
    return (0, filename)

{% if generate_repo_stats %}
#!/usr/bin/env python3
"""
Repository statistics generator that creates a stats page.
Uses gh CLI commands to extract actual repository data.
"""

import json
import subprocess
import sys
from datetime import datetime
import mkdocs_gen_files

class StatsGenerator:
    def __init__(self, repo_owner="{{ github_username }}", repo_name="{{ repo_name }}"):
        self.repo_owner = repo_owner
        self.repo_name = repo_name
        self.repo = f"{repo_owner}/{repo_name}"
        
    def run_gh_command(self, command):
        """Run a gh command and return JSON result."""
        try:
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                check=True
            )
            return json.loads(result.stdout.strip()) if result.stdout.strip() else {}
        except (subprocess.CalledProcessError, json.JSONDecodeError) as e:
            print(f"⚠️ GitHub CLI command failed: {command}", file=sys.stderr)
            print(f"⚠️ Error: {e}", file=sys.stderr)
            return {}
    
    def run_gh_command_text(self, command):
        """Run a gh command and return text result."""
        try:
            result = subprocess.run(
                command,
                shell=True,
                capture_output=True,
                text=True,
                check=True
            )
            return result.stdout.strip()
        except subprocess.CalledProcessError as e:
            print(f"⚠️ GitHub CLI command failed: {command}", file=sys.stderr)
            print(f"⚠️ Error: {e}", file=sys.stderr)
            return ""
    
    def get_repo_stats(self):
        """Get basic repository statistics."""
        return self.run_gh_command(f'gh repo view {self.repo} --json stargazerCount,forkCount,watchers,openIssues,createdAt,updatedAt,pushedAt,size,defaultBranchRef,licenseInfo,isPrivate,visibility')
    
    def get_contributors(self):
        """Get contributor information."""
        contributors = self.run_gh_command(f'gh api repos/{self.repo}/contributors --paginate')
        return contributors if isinstance(contributors, list) else []
    
    def get_languages(self):
        """Get programming languages."""
        return self.run_gh_command(f'gh api repos/{self.repo}/languages')
    
    def get_traffic_views(self):
        """Get traffic view statistics."""
        return self.run_gh_command(f'gh api repos/{self.repo}/traffic/views')
    
    def get_traffic_clones(self):
        """Get traffic clone statistics."""
        return self.run_gh_command(f'gh api repos/{self.repo}/traffic/clones')
    
    def get_popular_paths(self):
        """Get popular paths/files."""
        paths = self.run_gh_command(f'gh api repos/{self.repo}/traffic/popular/paths')
        return paths if isinstance(paths, list) else []
    
    def get_referrers(self):
        """Get referrer statistics."""
        referrers = self.run_gh_command(f'gh api repos/{self.repo}/traffic/popular/referrers')
        return referrers if isinstance(referrers, list) else []
    
    def get_releases(self):
        """Get release information."""
        releases = self.run_gh_command(f'gh api repos/{self.repo}/releases --paginate')
        return releases[:10] if isinstance(releases, list) else []  # Top 10 releases
    
    def get_issue_stats(self):
        """Get issue and PR statistics."""
        open_issues = self.run_gh_command_text(f'gh api search/issues -f q="repo:{self.repo} type:issue state:open" --jq ".total_count"')
        closed_issues = self.run_gh_command_text(f'gh api search/issues -f q="repo:{self.repo} type:issue state:closed" --jq ".total_count"')
        open_prs = self.run_gh_command_text(f'gh api search/issues -f q="repo:{self.repo} type:pr state:open" --jq ".total_count"')
        closed_prs = self.run_gh_command_text(f'gh api search/issues -f q="repo:{self.repo} type:pr state:closed" --jq ".total_count"')
        
        return {
            'open_issues': int(open_issues) if open_issues.isdigit() else 0,
            'closed_issues': int(closed_issues) if closed_issues.isdigit() else 0,
            'open_prs': int(open_prs) if open_prs.isdigit() else 0,
            'closed_prs': int(closed_prs) if closed_prs.isdigit() else 0
        }
    
    def generate_stats_page(self):
        """Generate the statistics page with modern design."""
        print("🚀 Extracting repository statistics via GitHub CLI...", file=sys.stderr)
        
        # Get current timestamp
        run_time = datetime.now().strftime('%Y-%m-%d at %H:%M:%S UTC')
        
        # Extract all statistics
        print("📊 Gathering repository data...", file=sys.stderr)
        repo_stats = self.get_repo_stats()
        contributors = self.get_contributors()
        languages = self.get_languages()
        traffic_views = self.get_traffic_views()
        traffic_clones = self.get_traffic_clones()
        popular_paths = self.get_popular_paths()
        referrers = self.get_referrers()
        releases = self.get_releases()
        issue_stats = self.get_issue_stats()
        
        # Repository overview with fallbacks
        stars = repo_stats.get('stargazerCount', 0)
        forks = repo_stats.get('forkCount', 0)
        watchers = repo_stats.get('watchers', {}).get('totalCount', 0) if isinstance(repo_stats.get('watchers'), dict) else repo_stats.get('watchers', 0)
        open_issues = repo_stats.get('openIssues', 0)
        repo_size = repo_stats.get('size', 0) / 1024  # Convert to MB
        default_branch = repo_stats.get('defaultBranchRef', {}).get('name', 'main') if repo_stats.get('defaultBranchRef') else 'main'
        last_push = repo_stats.get('pushedAt', '')[:10] if repo_stats.get('pushedAt') else 'Unknown'
        
        # Traffic statistics with fallbacks
        total_views = traffic_views.get('count', 0)
        unique_visitors = traffic_views.get('uniques', 0)
        total_clones = traffic_clones.get('count', 0)
        unique_cloners = traffic_clones.get('uniques', 0)
        
        # Calculate issue and PR rates
        total_issues = issue_stats['open_issues'] + issue_stats['closed_issues']
        total_prs = issue_stats['open_prs'] + issue_stats['closed_prs']
        issue_close_rate = (issue_stats['closed_issues'] / total_issues * 100) if total_issues > 0 else 0
        pr_close_rate = (issue_stats['closed_prs'] / total_prs * 100) if total_prs > 0 else 0
        
        # Start building the content with modern design
        content = f"""# :bar_chart: Repository Statistics

!!! info "Live Analytics Dashboard"
    **Generated:** {run_time} • **Source:** GitHub API via CLI

---

## :rocket: Repository Overview

<div class="grid cards" markdown>

-   :material-star: **{stars:,} Stars**
    
    ---
    
    Community endorsements and project popularity

-   :material-source-fork: **{forks:,} Forks**
    
    ---
    
    Active development branches and contributions

-   :material-eye: **{watchers:,} Watchers**
    
    ---
    
    Users following project updates

-   :material-database: **{repo_size:.1f} MB**
    
    ---
    
    Total repository storage

</div>

### :information: Project Details

| :material-source-branch: Default Branch | :material-clock: Last Push | :material-alert-circle: Open Issues |
|:---------------------------------------:|:---------------------------:|:-----------------------------------:|
| **{default_branch}** | **{last_push}** | **{open_issues:,}** |

---

## :chart_with_upwards_trend: Traffic & Engagement

### :globe_with_meridians: Visitor Analytics (Last 14 Days)

| :eyes: Page Views | :busts_in_silhouette: Unique Visitors | :arrow_down: Clones | :bust_in_silhouette: Unique Cloners |
|:-----------------:|:-------------------------------------:|:-------------------:|:-----------------------------------:|
| **{total_views:,}** | **{unique_visitors:,}** | **{total_clones:,}** | **{unique_cloners:,}** |

"""
        
        # Popular Files section
        if popular_paths:
            content += """### :fire: Most Popular Content

| Rank | :material-file: Path | :eyes: Views | :busts_in_silhouette: Unique Visitors |
|:----:|---------------------|:------------:|:-------------------------------------:|
"""
            for i, path in enumerate(popular_paths[:15], 1):
                file_path = path.get('path', '')
                views = path.get('count', 0)
                uniques = path.get('uniques', 0)
                content += f"| **{i}** | `{file_path}` | **{views:,}** | **{uniques:,}** |\n"
            content += "\n"
        
        # Traffic Sources section
        if referrers:
            content += """### :link: Traffic Sources

| Rank | :material-web: Referrer | :eyes: Views | :busts_in_silhouette: Unique Visitors |
|:----:|------------------------|:------------:|:-------------------------------------:|
"""
            for i, referrer in enumerate(referrers[:15], 1):
                source = referrer.get('referrer', 'Direct')
                views = referrer.get('count', 0)
                uniques = referrer.get('uniques', 0)
                content += f"| **{i}** | **{source}** | **{views:,}** | **{uniques:,}** |\n"
            content += "\n"
        
        content += "---\n\n"
        
        # Programming Languages section
        if languages:
            total_bytes = sum(languages.values())
            content += """## :computer: Technology Profile

### :material-code-json: Programming Languages

<div class="grid cards" markdown>
"""
            # Add top 4 languages as cards
            sorted_langs = sorted(languages.items(), key=lambda x: x[1], reverse=True)
            for lang, bytes_count in sorted_langs[:4]:
                percentage = (bytes_count / total_bytes * 100) if total_bytes > 0 else 0
                content += f"""
-   :material-language-{lang.lower()}: **{lang}**
    
    ---
    
    {percentage:.1f}% • {bytes_count:,} bytes
"""
            
            content += """
</div>

#### Complete Language Breakdown

| Language | :material-database: Bytes | :material-percent: Percentage |
|----------|:-------------------------:|:-----------------------------:|
"""
            for lang, bytes_count in sorted_langs:
                percentage = (bytes_count / total_bytes * 100) if total_bytes > 0 else 0
                content += f"| **{lang}** | `{bytes_count:,}` | **{percentage:.1f}%** |\n"
            content += "\n---\n\n"
        
        # Issues and Pull Requests section
        content += f"""## :clipboard: Project Management

### :bug: Issues & Pull Requests

<div class="grid cards" markdown>

-   :material-alert-circle: **{issue_stats['open_issues']:,} Open Issues**
    
    ---
    
    Current problems and feature requests

-   :material-check-circle: **{issue_stats['closed_issues']:,} Closed Issues**
    
    ---
    
    {issue_close_rate:.1f}% close rate

-   :material-source-pull: **{issue_stats['open_prs']:,} Open PRs**
    
    ---
    
    Pending contributions and reviews

-   :material-check-all: **{issue_stats['closed_prs']:,} Merged PRs**
    
    ---
    
    {pr_close_rate:.1f}% merge rate

</div>

"""
        
        # Releases section
        if releases:
            content += f"""### :package: Recent Releases

!!! releases "Latest {len(releases)} Releases"
    
| :material-tag: Release | :material-source-branch: Tag | :material-calendar: Published |
|------------------------|:-----------------------------:|:-----------------------------:|
"""
            for release in releases:
                name = release.get('name') or release.get('tag_name', 'Unnamed')
                tag = release.get('tag_name', 'N/A')
                published = release.get('published_at', '')[:10] if release.get('published_at') else 'Unknown'
                content += f"| **{name}** | `{tag}` | **{published}** |\n"
            content += "\n"
        
        content += "---\n\n"
        
        # Contributors section
        content += f"""## :technologist: Community

### :trophy: Top Contributors

!!! success "Recognition Board - {len(contributors)} Total Contributors"

| Rank | :material-account: Contributor | :material-source-commit: Contributions | :material-image: Avatar |
|:----:|-------------------------------|:--------------------------------------:|:-----------------------:|
"""
        
        # Add top 15 contributors with avatars
        for i, contributor in enumerate(contributors[:15], 1):
            username = contributor.get('login', 'Unknown')
            contributions = contributor.get('contributions', 0)
            avatar_url = contributor.get('avatar_url', '')
            avatar_html = f'<img src="{avatar_url}" width="32" height="32" style="border-radius: 50%; vertical-align: middle;" alt="{username}">' if avatar_url else ':material-account-circle:'
            content += f"| **{i}** | **{username}** | **{contributions:,}** | {avatar_html} |\n"
        
        # Try to create assets directory for any future visualizations
        try:
            with mkdocs_gen_files.open("assets/.gitkeep", "w") as f:
                f.write("# Assets directory for charts and visualizations\n")
            print("✅ Ensured assets directory exists", file=sys.stderr)
        except Exception as e:
            print(f"⚠️ Could not ensure assets directory: {e}", file=sys.stderr)
        
        # Add charts section placeholder
        content += """

---

## :chart_increasing: Development Activity

### :calendar: Commit Timeline

!!! abstract "Weekly Development Rhythm"
    Interactive chart showing commit frequency over time.

<div id="commit-activity-chart" style="height:400px; width:100%; background: var(--md-default-bg-color); border: 2px dashed var(--md-default-fg-color--lighter); border-radius: 8px; display: flex; align-items: center; justify-content: center;">
    <p style="color: var(--md-default-fg-color--light); font-style: italic;">Chart will load here (requires GitHub API data)</p>
</div>

### :chart_increasing: Code Evolution

!!! abstract "Lines Added vs Removed"
    Visual representation of code changes and development intensity.

<div id="code-changes-chart" style="height:400px; width:100%; background: var(--md-default-bg-color); border: 2px dashed var(--md-default-fg-color--lighter); border-radius: 8px; display: flex; align-items: center; justify-content: center;">
    <p style="color: var(--md-default-fg-color--light); font-style: italic;">Chart will load here (requires GitHub API data)</p>
</div>

---

## :information_source: Technical Information

!!! gear "How This Dashboard Works"
    
    === ":material-api: Data Collection"
        
        - **GitHub CLI**: Authenticated API access
        - **Real-time**: Live data from GitHub
        - **Comprehensive**: All public repository metrics
        - **Secure**: No sensitive data stored
    
    === ":material-refresh: Generation Process"
        
        - **Trigger**: MkDocs build process
        - **Frequency**: Every documentation update
        - **Method**: Python script with GitHub CLI
        - **Output**: Markdown with embedded data
    
    === ":material-chart-timeline: Available Charts"
        
        - **Commit Activity**: Weekly frequency timeline
        - **Code Changes**: Additions and deletions over time
        - **Language Breakdown**: Repository composition
        - **Traffic Analytics**: Visitor and engagement metrics

"""
        
        # Write the complete stats page to auxilary directory 
        with mkdocs_gen_files.open("auxilary/stats.md", "w") as f:
            f.write(content)
        
        # Try to add interactive charts if data is available
        try:
            self.add_commit_activity_chart(content)
            self.add_code_frequency_chart(content)
        except Exception as e:
            print(f"⚠️ Could not generate interactive charts: {e}", file=sys.stderr)
        
        print(f"✅ Repository statistics generated successfully!", file=sys.stderr)
        print(f"📊 {len(contributors)} contributors • 👁️ {total_views:,} views • 📁 {len(popular_paths)} popular files", file=sys.stderr)

    def add_commit_activity_chart(self, base_content):
        """Add commit activity chart if data is available."""
        print("📈 Attempting to generate commit activity chart...", file=sys.stderr)
        commit_activity = self.run_gh_command(f'gh api repos/{self.repo}/stats/commit_activity')
        
        if commit_activity and isinstance(commit_activity, list) and len(commit_activity) > 0:
            print(f"✅ Processing {len(commit_activity)} weeks of commit data", file=sys.stderr)
            
            # Process commit data for time series
            weeks = []
            commits = []
            
            # Last 52 weeks of data
            for week_data in commit_activity[-52:]:
                if 'week' in week_data and 'total' in week_data:
                    week_timestamp = week_data['week']
                    week_date = datetime.fromtimestamp(week_timestamp).strftime('%Y-%m-%d')
                    weeks.append(week_date)
                    commits.append(week_data['total'])
            
            if weeks and commits:
                # Create time series visualization data
                time_series_data = {
                    "data": [
                        {
                            "type": "scatter",
                            "mode": "lines+markers",
                            "x": weeks,
                            "y": commits,
                            "name": "Weekly Commits",
                            "line": {"color": "rgb(29, 78, 216)", "width": 3},
                            "marker": {"size": 6, "color": "rgb(29, 78, 216)"}
                        }
                    ],
                    "layout": {
                        "title": {"text": "Weekly Commit Activity", "font": {"size": 18}},
                        "xaxis": {"title": "Week", "tickangle": 45},
                        "yaxis": {"title": "Commits"},
                        "margin": {"l": 60, "r": 40, "t": 60, "b": 100},
                        "height": 400,
                        "paper_bgcolor": "rgba(0,0,0,0)",
                        "plot_bgcolor": "rgba(0,0,0,0)"
                    }
                }
                
                # Save chart data
                with mkdocs_gen_files.open("assets/commits_time_series.json", "w") as f:
                    f.write(json.dumps(time_series_data, indent=2))
                
                # Update stats page with working chart
                chart_script = '''
<script>
document.addEventListener('DOMContentLoaded', function() {
    if (typeof Plotly !== 'undefined') {
        fetch('../../assets/commits_time_series.json')
            .then(response => response.json())
            .then(data => {
                Plotly.newPlot('commit-activity-chart', data.data, data.layout, {responsive: true});
            })
            .catch(error => {
                console.error('Error loading commit chart:', error);
                document.getElementById('commit-activity-chart').innerHTML = '<p style="text-align: center; color: var(--md-default-fg-color--light);">Chart data unavailable</p>';
            });
    }
});
</script>'''
                
                # Append updated stats with chart
                with mkdocs_gen_files.open("auxilary/stats.md", "a") as f:
                    f.write(chart_script)
                
                print("✅ Added interactive commit activity chart", file=sys.stderr)

    def add_code_frequency_chart(self, base_content):
        """Add code frequency chart if data is available."""
        print("📈 Attempting to generate code frequency chart...", file=sys.stderr)
        code_frequency = self.run_gh_command(f'gh api repos/{self.repo}/stats/code_frequency')
        
        if code_frequency and isinstance(code_frequency, list) and len(code_frequency) > 0:
            print(f"✅ Processing {len(code_frequency)} weeks of code frequency data", file=sys.stderr)
            
            # Process code frequency data
            weeks = []
            additions = []
            deletions = []
            
            # Last 52 weeks of data
            for week_data in code_frequency[-52:]:
                if len(week_data) >= 3:
                    week_timestamp = week_data[0]
                    week_date = datetime.fromtimestamp(week_timestamp).strftime('%Y-%m-%d')
                    weeks.append(week_date)
                    additions.append(week_data[1])  # Additions
                    deletions.append(-week_data[2])  # Convert deletions to positive for visualization
            
            if weeks and additions and deletions:
                # Create code frequency visualization
                code_frequency_data = {
                    "data": [
                        {
                            "type": "bar",
                            "x": weeks,
                            "y": additions,
                            "name": "Additions",
                            "marker": {"color": "rgb(34, 197, 94)"}
                        },
                        {
                            "type": "bar",
                            "x": weeks,
                            "y": deletions,
                            "name": "Deletions",
                            "marker": {"color": "rgb(239, 68, 68)"}
                        }
                    ],
                    "layout": {
                        "title": {"text": "Code Changes Over Time", "font": {"size": 18}},
                        "xaxis": {"title": "Week", "tickangle": 45},
                        "yaxis": {"title": "Lines of Code"},
                        "barmode": "group",
                        "margin": {"l": 60, "r": 40, "t": 60, "b": 100},
                        "height": 400,
                        "paper_bgcolor": "rgba(0,0,0,0)",
                        "plot_bgcolor": "rgba(0,0,0,0)"
                    }
                }
                
                # Save chart data
                with mkdocs_gen_files.open("assets/code_frequency.json", "w") as f:
                    f.write(json.dumps(code_frequency_data, indent=2))
                
                # Update stats page with working chart
                chart_script = '''
<script>
document.addEventListener('DOMContentLoaded', function() {
    if (typeof Plotly !== 'undefined') {
        fetch('../../assets/code_frequency.json')
            .then(response => response.json())
            .then(data => {
                Plotly.newPlot('code-changes-chart', data.data, data.layout, {responsive: true});
            })
            .catch(error => {
                console.error('Error loading code frequency chart:', error);
                document.getElementById('code-changes-chart').innerHTML = '<p style="text-align: center; color: var(--md-default-fg-color--light);">Chart data unavailable</p>';
            });
    }
});
</script>'''
                
                # Append updated stats with chart
                with mkdocs_gen_files.open("auxilary/stats.md", "a") as f:
                    f.write(chart_script)
                
                print("✅ Added interactive code frequency chart", file=sys.stderr)

# Main execution
try:
    print("🚀 Starting repository statistics generation...", file=sys.stderr)
    generator = StatsGenerator()
    generator.generate_stats_page()
    print("✅ Repository statistics generation completed!", file=sys.stderr)
except Exception as e:
    print(f"❌ Error generating repository statistics: {e}", file=sys.stderr)
    print("📝 Creating fallback stats page...", file=sys.stderr)
    
    # Create a fallback stats page if GitHub CLI fails
    fallback_content = """# :bar_chart: Repository Statistics

!!! warning "Statistics Unavailable"
    GitHub CLI authentication required to display live statistics.

## :gear: Setup Required

To enable live statistics:

1. **Install GitHub CLI**: `brew install gh` (macOS) or [download](https://cli.github.com/)
2. **Authenticate**: `gh auth login`
3. **Rebuild documentation**: Statistics will populate automatically

## :information: What You'll See

Once configured, this page will display:

- Repository metrics (stars, forks, size)
- Traffic analytics and popular content
- Interactive commit activity charts
- Programming language breakdown
- Contributor recognition board
- Issue and pull request statistics
- Recent releases timeline

---

*Configure GitHub CLI to see live repository analytics.*
"""
    
    try:
        with mkdocs_gen_files.open("auxilary/stats.md", "w") as f:
            f.write(fallback_content)
        print("✅ Created fallback stats page", file=sys.stderr)
    except Exception as fallback_error:
        print(f"❌ Could not create fallback stats page: {fallback_error}", file=sys.stderr)
        
{% endif %}

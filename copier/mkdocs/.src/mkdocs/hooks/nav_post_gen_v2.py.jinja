#!/usr/bin/env python3
"""
Post-generation hook that runs AFTER all gen-files plugins have completed
This ensures navigation includes all generated content
"""

import os
import re
from pathlib import Path

def on_env(env, config, files):
    """
    This hook runs after all plugins (including gen-files) have processed.
    We use the files object to detect virtual files created by gen-files.
    """
    print("ðŸ”§ Post-generation hook: Creating navigation...")
    
    docs_dir = Path(config['docs_dir'])
    
    # Pass the MkDocs files object to access virtual files
    generate_final_navigation(docs_dir, files)
    
    return env

def clean_title(filename):
    """Clean filename for display."""
    name = filename.replace('.md', '')
    name = re.sub(r'^\d+[-_.](?=\w)', '', name)
    return name.replace('_', ' ').replace('-', ' ').title()

def get_sort_key(filename):
    """Get sort key for ordering."""
    match = re.match(r'^(\d+)[-_.]', filename)
    if match:
        return (int(match.group(1)), filename)
    return (0, filename)

def generate_final_navigation(docs_path, mkdocs_files):
    """Generate SUMMARY.md after ALL content is created."""
    print(f"ðŸ“‚ Scanning for all content...")
    
    # First, detect src-data virtual files from gen-files
    src_data_sections = {}
    has_src_data = False
    
    for file_obj in mkdocs_files:
        src_path = str(file_obj.src_path)
        if src_path.startswith('src-data-docs/'):
            has_src_data = True
            # Parse the path
            parts = src_path.split('/')
            if len(parts) >= 2:
                filename = parts[1]
                if filename == 'index.md':
                    continue
                elif filename.endswith('_contents.md'):
                    section = filename[:-13]  # Remove _contents.md
                    if section not in src_data_sections:
                        src_data_sections[section] = {'has_contents': True}
                    else:
                        src_data_sections[section]['has_contents'] = True
                elif filename.endswith('.md'):
                    section = filename[:-3]  # Remove .md
                    if section not in src_data_sections:
                        src_data_sections[section] = {'has_main': True}
                    else:
                        src_data_sections[section]['has_main'] = True
    
    if has_src_data:
        print(f"âœ… Found src-data virtual files: {len(src_data_sections)} sections")
        for section, info in src_data_sections.items():
            print(f"   - {section}: main={info.get('has_main', False)}, contents={info.get('has_contents', False)}")
    
    # Collect real files from docs directory
    files_by_dir = {}
    
    for md_file in docs_path.rglob("*.md"):
        if any(part.startswith('.') for part in md_file.parts):
            continue
        if md_file.name == "SUMMARY.md" or md_file.name.startswith("_"):
            continue
        
        rel_path = md_file.relative_to(docs_path)
        parts = list(rel_path.parts)
        
        # Skip src-data-docs (handled separately via virtual files)
        if parts and parts[0] == 'src-data-docs':
            continue
            
        if len(parts) == 1:
            if 'ROOT' not in files_by_dir:
                files_by_dir['ROOT'] = []
            files_by_dir['ROOT'].append(md_file)
        else:
            dir_name = parts[0]
            if dir_name not in files_by_dir:
                files_by_dir[dir_name] = []
            files_by_dir[dir_name].append(md_file)
    
    # Generate navigation
    nav_lines = []
    
    # Add top-level files
    if 'ROOT' in files_by_dir:
        root_files = sorted(files_by_dir['ROOT'], key=lambda f: get_sort_key(f.name))
        
        # Add index.md first
        for f in root_files[:]:
            if f.name == 'index.md':
                nav_lines.append('- [Home](index.md)')
                root_files.remove(f)
                break
        
        # Add other root files
        for f in root_files:
            title = clean_title(f.name)
            nav_lines.append(f'- [{title}]({f.name})')
    
    # Add subdirectories
    for dir_name in sorted(files_by_dir.keys()):
        if dir_name == 'ROOT':
            continue
            
        dir_title = clean_title(dir_name)
        nav_lines.append(f'- {dir_title}:')
        
        dir_files = sorted(files_by_dir[dir_name], key=lambda f: get_sort_key(f.name))
        for f in dir_files:
            rel_path = f.relative_to(docs_path)
            title = clean_title(f.name)
            nav_lines.append(f'  - [{title}]({str(rel_path).replace(os.sep, "/")})')
    
    # Add src-data documentation from virtual files
    if has_src_data and src_data_sections:
        nav_lines.append('- Source Data:')
        nav_lines.append('  - [Overview](src-data-docs/index.md)')
        
        # Add each section in alphabetical order
        for section in sorted(src_data_sections.keys()):
            info = src_data_sections[section]
            section_title = clean_title(section)
            
            # Add main page if it exists
            if info.get('has_main', False):
                nav_lines.append(f'  - [{section_title}](src-data-docs/{section}.md)')
                
                # Add contents as sub-item if it exists
                if info.get('has_contents', False):
                    nav_lines.append(f'    - [Contents](src-data-docs/{section}_contents.md)')
    
    # Write SUMMARY.md
    summary_content = '\n'.join(nav_lines)
    summary_path = docs_path / 'SUMMARY.md'
    
    with open(summary_path, 'w') as f:
        f.write(summary_content)
    
    print(f"âœ… Generated {summary_path} with {len(nav_lines)} entries")
    if has_src_data:
        print(f"ðŸ“‹ Included {len(src_data_sections)} src-data sections")

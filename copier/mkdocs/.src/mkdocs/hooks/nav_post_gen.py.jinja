#!/usr/bin/env python3
"""
Post-generation hook that runs AFTER all gen-files plugins have completed
This ensures navigation includes all generated content
"""

import os
import re
from pathlib import Path

def on_env(env, config, files):
    """
    This hook runs after all plugins (including gen-files) have processed.
    Perfect time to generate navigation.
    """
    print("ðŸ”§ Post-generation hook: Creating navigation...")
    
    docs_dir = Path(config['docs_dir'])
    
    # Pass the MkDocs files object to access virtual files
    generate_final_navigation(docs_dir, files)
    
    return env

def clean_title(filename):
    """Clean filename for display."""
    name = filename.replace('.md', '')
    name = re.sub(r'^\d+[-_.](?=\w)', '', name)
    return name.replace('_', ' ').replace('-', ' ').title()

def get_sort_key(filename):
    """Get sort key for ordering."""
    match = re.match(r'^(\d+)[-_.]', filename)
    if match:
        return (int(match.group(1)), filename)
    return (0, filename)

def generate_final_navigation(docs_path, mkdocs_files):
    """Generate SUMMARY.md after ALL content is created."""
    print(f"ðŸ“‚ Scanning {docs_path} for all content...")
    
    # Collect ALL files (real and generated)
    nav_lines = []
    
    # First, check virtual files from gen-files plugin
    src_data_sections = set()
    has_src_data = False
    
    for file_obj in mkdocs_files:
        if 'src-data-docs' in str(file_obj.src_path):
            has_src_data = True
            # Extract section name from path like 'src-data-docs/section.md'
            parts = str(file_obj.src_path).split('/')
            if len(parts) >= 2 and parts[0] == 'src-data-docs':
                filename = parts[1]
                if filename != 'index.md' and not filename.endswith('_contents.md'):
                    section_name = filename.replace('.md', '')
                    src_data_sections.add(section_name)
    
    if has_src_data:
        print(f"âœ… Found src-data virtual files: {len(src_data_sections)} sections")
    
    # Scan real docs directory for regular files
    for md_file in docs_path.rglob("*.md"):
        if any(part.startswith('.') for part in md_file.parts):
            continue
        if md_file.name == "SUMMARY.md" or md_file.name.startswith("_"):
            continue
        all_md_files.append(md_file)
    
    # Check if src-data-docs was generated
    src_data_docs = docs_path / 'src-data-docs'
    virtual_src_data = False
    
    # If not in real filesystem, check common build locations
    if not src_data_docs.exists():
        for check_dir in [build_dir / 'src-data-docs', temp_dir / 'src-data-docs']:
            if check_dir.exists():
                virtual_src_data = True
                print(f"âœ… Found virtual src-data-docs in {check_dir}")
                break
        else:
            # Assume it exists as virtual files if src-data folder exists
            if (Path('src-data').exists() or 
                (docs_path.parent / 'src-data').exists() or
                (docs_path.parent.parent / 'src-data').exists()):
                virtual_src_data = True
                print("âœ… Assuming src-data-docs exists as virtual files")
    else:
        print("âœ… Found real src-data-docs directory")
    
    # Organize files by directory
    files_by_dir = {}
    
    for md_file in all_md_files:
        rel_path = md_file.relative_to(docs_path)
        parts = list(rel_path.parts)
        
        if len(parts) == 1:
            if 'ROOT' not in files_by_dir:
                files_by_dir['ROOT'] = []
            files_by_dir['ROOT'].append(md_file)
        else:
            dir_name = parts[0]
            if dir_name not in files_by_dir:
                files_by_dir[dir_name] = []
            files_by_dir[dir_name].append(md_file)
    
    # Generate navigation
    # Add top-level files
    if 'ROOT' in files_by_dir:
        root_files = sorted(files_by_dir['ROOT'], key=lambda f: get_sort_key(f.name))
        
        # Add index.md first
        index_added = False
        for f in root_files[:]:
            if f.name == 'index.md':
                nav_lines.append('- [Home](index.md)')
                root_files.remove(f)
                index_added = True
                break
        
        # Add other root files
        for f in root_files:
            title = clean_title(f.name)
            nav_lines.append(f'- [{title}]({f.name})')
    
    # Add subdirectories
    for dir_name in sorted(files_by_dir.keys()):
        if dir_name == 'ROOT' or dir_name == 'src-data-docs':
            continue
            
        dir_title = clean_title(dir_name)
        nav_lines.append(f'- {dir_title}:')
        
        dir_files = sorted(files_by_dir[dir_name], key=lambda f: get_sort_key(f.name))
        for f in dir_files:
            rel_path = f.relative_to(docs_path)
            title = clean_title(f.name)
            nav_lines.append(f'  - [{title}]({str(rel_path).replace(os.sep, "/")})')
    
    # Add src-data documentation if it exists (real or virtual)
    if src_data_docs.exists() or virtual_src_data:
        nav_lines.append('- Source Data:')
        nav_lines.append('  - [Overview](src-data-docs/index.md)')
        
        # If real directory, scan it
        if src_data_docs.exists():
            sections = set()
            for f in src_data_docs.glob('*.md'):
                if f.name != 'index.md' and not f.name.endswith('_contents.md'):
                    sections.add(f.stem)
            
            for section in sorted(sections):
                nav_lines.append(f'  - [{clean_title(section)}](src-data-docs/{section}.md)')
                contents_file = src_data_docs / f'{section}_contents.md'
                if contents_file.exists():
                    nav_lines.append(f'    - [Contents](src-data-docs/{section}_contents.md)')
        else:
            # Virtual files - check src-data directory for subfolders
            src_data_path = None
            for check_path in [Path('src-data'), docs_path.parent / 'src-data', docs_path.parent.parent / 'src-data']:
                if check_path.exists():
                    src_data_path = check_path
                    break
            
            if src_data_path:
                for subfolder in sorted(src_data_path.iterdir()):
                    if subfolder.is_dir() and not subfolder.name.startswith('.'):
                        section = subfolder.name
                        nav_lines.append(f'  - [{clean_title(section)}](src-data-docs/{section}.md)')
                        nav_lines.append(f'    - [Contents](src-data-docs/{section}_contents.md)')
    
    # Write SUMMARY.md
    summary_content = '\n'.join(nav_lines)
    summary_path = docs_path / 'SUMMARY.md'
    
    with open(summary_path, 'w') as f:
        f.write(summary_content)
    
    print(f"âœ… Generated {summary_path} with {len(nav_lines)} entries")
    print(f"ðŸ“‹ Included src-data: {'Yes' if (src_data_docs.exists() or virtual_src_data) else 'No'}")

#!/usr/bin/env python3
"""
Combined gen-files script that processes src-data THEN generates navigation
This ensures proper ordering
"""

import mkdocs_gen_files
import os
import sys
import re
from pathlib import Path

# Track if we've already run
_has_run = False

def clean_title(filename):
    """Clean filename for display."""
    name = filename.replace('.md', '')
    name = re.sub(r'^\d+[-_.](?=\w)', '', name)
    return name.replace('_', ' ').replace('-', ' ').title()

def get_sort_key(filename):
    """Get sort key for ordering."""
    match = re.match(r'^(\d+)[-_.]', filename)
    if match:
        return (int(match.group(1)), filename)
    return (0, filename)

def process_src_data():
    """Process src-data folder and generate documentation."""
    src_data_path = Path("src-data")
    
    if not src_data_path.exists():
        print("‚ÑπÔ∏è  No src-data folder found, skipping", file=sys.stderr)
        return []
    
    print(f"üìÅ Processing src-data folder: {src_data_path.absolute()}", file=sys.stderr)
    
    output_base = "src-data-docs"
    sections = []
    
    # Create index page
    index_content = """# Source Data Documentation

This section contains documentation extracted from the `src-data` folder.

## Available Sections

"""
    
    # Process each subfolder
    for subfolder in sorted(src_data_path.iterdir()):
        if not subfolder.is_dir() or subfolder.name.startswith('.'):
            continue
            
        folder_name = subfolder.name
        print(f"  üìÇ Processing subfolder: {folder_name}", file=sys.stderr)
        
        # Extract README.md
        readme_path = subfolder / "README.md"
        readme_content = f"# {folder_name}\n\nNo README.md found for this section."
        if readme_path.exists():
            with open(readme_path, 'r', encoding='utf-8') as f:
                readme_content = f.read()
        
        # Write README content
        with mkdocs_gen_files.open(f"{output_base}/{folder_name}.md", "w") as f:
            f.write(readme_content)
        
        # Process context file
        context_content = ""
        context_files = list(subfolder.glob("*context*"))
        if context_files:
            try:
                with open(context_files[0], 'r', encoding='utf-8') as f:
                    context_content = f.read()
            except:
                pass
        
        # Create contents page
        contents_page = f"""# {folder_name} - Contents

## Context

"""
        
        if context_content:
            contents_page += "```\n" + context_content + "\n```\n\n"
        else:
            contents_page += "_No context file found._\n\n"
        
        # List files
        contents_page += "## Files\n\n"
        contents_page += "| File | Type | Size | Link |\n"
        contents_page += "|------|------|------|------|\n"
        
        files = []
        for file in sorted(subfolder.iterdir()):
            if file.is_file() and not file.name.startswith('.'):
                file_size = file.stat().st_size
                file_type = file.suffix[1:] if file.suffix else "file"
                
                if file_size < 1024:
                    size_str = f"{file_size} B"
                elif file_size < 1024 * 1024:
                    size_str = f"{file_size / 1024:.1f} KB"
                else:
                    size_str = f"{file_size / (1024 * 1024):.1f} MB"
                
                link = f"[View](../../src-data/{subfolder.name}/{file.name})"
                contents_page += f"| {file.name} | {file_type} | {size_str} | {link} |\n"
                files.append(file.name)
        
        contents_page += f"\n\n---\n_Total files: {len(files)}_\n"
        
        # Write contents page
        with mkdocs_gen_files.open(f"{output_base}/{folder_name}_contents.md", "w") as f:
            f.write(contents_page)
        
        sections.append(folder_name)
        
        # Update index
        index_content += f"- **[{folder_name}]({folder_name}.md)** "
        index_content += f"[[Contents]({folder_name}_contents.md)]\n"
    
    # Write index
    with mkdocs_gen_files.open(f"{output_base}/index.md", "w") as f:
        f.write(index_content)
    
    print(f"‚úÖ Processed {len(sections)} subfolders", file=sys.stderr)
    return sections

def generate_and_write_navigation(src_data_sections):
    """Generate SUMMARY.md including src-data sections."""
    docs_path = Path("../../docs")
    
    if not docs_path.exists():
        print("‚ö†Ô∏è  Docs directory not found", file=sys.stderr)
        return
    
    # Collect existing files
    files_by_dir = {}
    
    for md_file in docs_path.rglob("*.md"):
        if any(part.startswith('.') for part in md_file.parts):
            continue
        if md_file.name == "SUMMARY.md" or md_file.name.startswith("_"):
            continue
            
        rel_path = md_file.relative_to(docs_path)
        parts = list(rel_path.parts)
        
        # Skip src-data-docs (will be added separately)
        if parts and parts[0] == 'src-data-docs':
            continue
        
        if len(parts) == 1:
            if 'ROOT' not in files_by_dir:
                files_by_dir['ROOT'] = []
            files_by_dir['ROOT'].append(md_file)
        else:
            dir_name = parts[0]
            if dir_name not in files_by_dir:
                files_by_dir[dir_name] = []
            files_by_dir[dir_name].append(md_file)
    
    # Generate navigation
    nav_lines = []
    
    # Add top-level files
    if 'ROOT' in files_by_dir:
        root_files = sorted(files_by_dir['ROOT'], key=lambda f: get_sort_key(f.name))
        
        for f in root_files:
            if f.name == 'index.md':
                nav_lines.append('- [Home](index.md)')
                root_files.remove(f)
                break
        
        for f in root_files:
            title = clean_title(f.name)
            nav_lines.append(f'- [{title}]({f.name})')
    
    # Add subdirectories
    for dir_name in sorted(files_by_dir.keys()):
        if dir_name == 'ROOT':
            continue
            
        dir_title = clean_title(dir_name)
        nav_lines.append(f'- {dir_title}:')
        
        dir_files = sorted(files_by_dir[dir_name], key=lambda f: get_sort_key(f.name))
        for f in dir_files:
            rel_path = f.relative_to(docs_path)
            title = clean_title(f.name)
            nav_lines.append(f'  - [{title}]({str(rel_path).replace(os.sep, "/")})')
    
    # Add src-data documentation if we processed any
    if src_data_sections:
        nav_lines.append('- Source Data:')
        nav_lines.append('  - [Overview](src-data-docs/index.md)')
        
        for section in sorted(src_data_sections):
            nav_lines.append(f'  - [{clean_title(section)}](src-data-docs/{section}.md)')
            nav_lines.append(f'    - [Contents](src-data-docs/{section}_contents.md)')
    
    # Write SUMMARY.md
    summary_content = '\n'.join(nav_lines)
    summary_path = docs_path / 'SUMMARY.md'
    
    with open(summary_path, 'w') as f:
        f.write(summary_content)
    
    print(f"‚úÖ Generated {summary_path} with {len(nav_lines)} entries", file=sys.stderr)

def main():
    """Main function that runs both steps in order."""
    global _has_run
    
    if _has_run:
        print("‚è≠Ô∏è  Already processed", file=sys.stderr)
        return
    
    _has_run = True
    
    print("üöÄ Starting combined processing...", file=sys.stderr)
    
    # Step 1: Process src-data
    src_data_sections = process_src_data()
    
    # Step 2: Generate navigation (including src-data)
    generate_and_write_navigation(src_data_sections)
    
    print("‚úÖ All processing complete!", file=sys.stderr)

# Run when imported by gen-files
main()

#!/usr/bin/env python3
"""
Process src-data folder to extract READMEs and create content pages
"""

import os
import sys
import json
from pathlib import Path
import mkdocs_gen_files

# Flag to prevent multiple runs
_has_run = False

def process_src_data():
    """Process src-data folder and generate documentation."""
    global _has_run
    
    if _has_run:
        return
    _has_run = True
    
    # Check various possible locations for src-data
    possible_paths = [
        Path("src-data"),
        Path("../src-data"),
        Path("../../src-data"),
        Path.cwd() / "src-data"
    ]
    
    src_data_path = None
    for path in possible_paths:
        if path.exists() and path.is_dir():
            src_data_path = path
            break
    
    if not src_data_path:
        print("‚ÑπÔ∏è  No src-data folder found, skipping", file=sys.stderr)
        return
    
    print(f"üìÅ Processing src-data folder: {src_data_path.absolute()}", file=sys.stderr)
    
    output_base = "src-data-docs"
    sections = []
    
    # Create index page
    index_content = """# Source Data Documentation

This section contains documentation extracted from the `src-data` folder.

## Available Sections

| Section | Description | Files | Has README | Has Context |
|---------|-------------|-------|------------|-------------|
"""
    
    # Process each subfolder
    for subfolder in sorted(src_data_path.iterdir()):
        if not subfolder.is_dir() or subfolder.name.startswith('.'):
            continue
            
        folder_name = subfolder.name
        print(f"  üìÇ Processing subfolder: {folder_name}", file=sys.stderr)
        
        # Extract README.md if exists
        readme_path = subfolder / "README.md"
        readme_content = ""
        has_readme = False
        
        if readme_path.exists():
            try:
                with open(readme_path, 'r', encoding='utf-8') as f:
                    readme_content = f.read()
                has_readme = True
                print(f"    ‚úÖ Found README.md", file=sys.stderr)
            except Exception as e:
                print(f"    ‚ö†Ô∏è  Error reading README.md: {e}", file=sys.stderr)
                readme_content = f"# {folder_name}\n\nError reading README.md: {e}"
        else:
            readme_content = f"# {folder_name}\n\nNo README.md found for this section.\n\nThis folder contains data files related to {folder_name}."
        
        # Write the README content as the main page for this subfolder
        with mkdocs_gen_files.open(f"{output_base}/{folder_name}.md", "w") as f:
            f.write(readme_content)
        
        # Look for context files
        context_content = ""
        context_file_name = ""
        has_context = False
        
        # Search for files with 'context' in the name (case-insensitive)
        for file in subfolder.iterdir():
            if file.is_file() and 'context' in file.name.lower():
                context_file_name = file.name
                try:
                    with open(file, 'r', encoding='utf-8') as f:
                        context_content = f.read()
                    has_context = True
                    print(f"    ‚úÖ Found context file: {file.name}", file=sys.stderr)
                    break
                except Exception as e:
                    print(f"    ‚ö†Ô∏è  Error reading context file {file.name}: {e}", file=sys.stderr)
        
        # Create contents page
        contents_page = f"""# {folder_name} - Contents

This page lists all files in the `{folder_name}` subfolder of src-data.

"""
        
        # Add context section if found
        if has_context:
            contents_page += f"## Context\n\n"
            contents_page += f"*From `{context_file_name}`:*\n\n"
            contents_page += "```\n"
            contents_page += context_content
            contents_page += "\n```\n\n"
        else:
            contents_page += "## Context\n\n"
            contents_page += "_No context file found in this folder._\n\n"
        
        # List all files in the subfolder
        contents_page += "## Files\n\n"
        contents_page += "| File | Type | Size | Description | Link |\n"
        contents_page += "|------|------|------|-------------|------|\n"
        
        files = []
        total_size = 0
        
        for file in sorted(subfolder.iterdir()):
            if file.is_file() and not file.name.startswith('.'):
                # Get file info
                file_size = file.stat().st_size
                total_size += file_size
                file_type = file.suffix[1:].upper() if file.suffix else "FILE"
                
                # Format size
                if file_size < 1024:
                    size_str = f"{file_size} B"
                elif file_size < 1024 * 1024:
                    size_str = f"{file_size / 1024:.1f} KB"
                else:
                    size_str = f"{file_size / (1024 * 1024):.1f} MB"
                
                # Create description based on file type
                description = ""
                if file.name == "README.md":
                    description = "Documentation"
                elif 'context' in file.name.lower():
                    description = "Context information"
                elif file.suffix == '.json':
                    description = "JSON data"
                elif file.suffix == '.yaml' or file.suffix == '.yml':
                    description = "YAML configuration"
                elif file.suffix == '.csv':
                    description = "CSV data"
                elif file.suffix == '.txt':
                    description = "Text file"
                else:
                    description = f"{file_type} file"
                
                # Create relative link
                link = f"[View](../../src-data/{subfolder.name}/{file.name})"
                
                contents_page += f"| {file.name} | {file_type} | {size_str} | {description} | {link} |\n"
                files.append(file.name)
        
        if not files:
            contents_page += "| _No files found_ | - | - | - | - |\n"
        
        # Add summary
        contents_page += f"\n### Summary\n\n"
        contents_page += f"- **Total files**: {len(files)}\n"
        contents_page += f"- **Total size**: "
        if total_size < 1024:
            contents_page += f"{total_size} B\n"
        elif total_size < 1024 * 1024:
            contents_page += f"{total_size / 1024:.1f} KB\n"
        else:
            contents_page += f"{total_size / (1024 * 1024):.1f} MB\n"
        contents_page += f"- **Folder path**: `src-data/{folder_name}/`\n"
        
        # Add navigation links
        contents_page += f"\n---\n"
        contents_page += f"[‚Üê Back to {folder_name} overview]({folder_name}.md) | "
        contents_page += f"[‚Üë Back to Source Data index](index.md)\n"
        
        # Write contents page
        with mkdocs_gen_files.open(f"{output_base}/{folder_name}_contents.md", "w") as f:
            f.write(contents_page)
        
        # Get description from README first line if available
        description = "No description"
        if readme_content:
            lines = readme_content.strip().split('\n')
            for line in lines:
                line = line.strip()
                if line and not line.startswith('#'):
                    description = line[:60] + "..." if len(line) > 60 else line
                    break
        
        # Add to sections list
        sections.append({
            'name': folder_name,
            'has_readme': has_readme,
            'has_context': has_context,
            'file_count': len(files),
            'description': description
        })
        
        # Update index table
        readme_icon = "‚úÖ" if has_readme else "‚ùå"
        context_icon = "‚úÖ" if has_context else "‚ùå"
        index_content += f"| [{folder_name}]({folder_name}.md) | {description} | {len(files)} | {readme_icon} | {context_icon} |\n"
    
    # Complete index page
    index_content += f"\n## Quick Links\n\n"
    for section in sections:
        index_content += f"- **{section['name']}**: [{section['name']} overview]({section['name']}.md) | "
        index_content += f"[View contents]({section['name']}_contents.md)\n"
    
    index_content += f"\n---\n"
    index_content += f"*Generated from {len(sections)} subfolders in src-data*\n"
    
    # Write index page
    with mkdocs_gen_files.open(f"{output_base}/index.md", "w") as f:
        f.write(index_content)
    
    print(f"‚úÖ Processed {len(sections)} subfolders from src-data", file=sys.stderr)
    
    # Note: Navigation is handled by hooks/generate_nav.py
    # This script only generates the content files
    return len(sections) > 0


# Call this function from your main gen_files script
if __name__ == "__main__":
    process_src_data()

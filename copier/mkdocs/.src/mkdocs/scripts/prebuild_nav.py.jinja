#!/usr/bin/env python3
"""
Pre-build script to generate SUMMARY.md in the docs directory
Run this before mkdocs build/serve.
"""

import os
import sys
from pathlib import Path
import re

# Configuration
DOCS_DIR = "../../docs"
OUTPUT_BASE = "wcrp-content"


def clean_title_from_filename(filename: str) -> str:
    """Extract and clean title from filename, removing leading numbers only if followed by separator."""
    # Remove .md extension
    name = filename.replace('.md', '')
    
    # Only remove leading numbers if they're followed by a separator (-, _, .)
    # This preserves files like "80_fdsoj" but cleans "01-intro" to "intro"
    name = re.sub(r'^\d+[-_.](?=\w)', '', name)
    
    # Split by '-' and find where the title starts
    parts = name.split('-')
    
    if len(parts) > 1:
        # Check if first part is a known section prefix
        if parts[0] in ['projects', 'news', 'activities', 'resources', 'publications', 'working']:
            title_parts = parts[1:]
        else:
            title_parts = parts
        
        # Convert to title case and join
        title = ' '.join(word.capitalize() for word in title_parts)
        return title
    
    # For files without dashes, just clean up underscores and capitalize
    return name.replace('_', ' ').title()


def scan_docs_and_generate_nav():
    """Scan docs directory and generate SUMMARY.md file."""
    docs_path = Path(DOCS_DIR)
    
    if not docs_path.exists():
        print(f"Error: Docs directory not found: {docs_path.absolute()}")
        return
    
    print(f"Scanning: {docs_path.absolute()}")
    
    # Build navigation structure
    nav_content = "# Navigation\n\n"
    
    # Get all markdown files
    md_files = sorted(docs_path.rglob("*.md"))
    
    # Process files by directory structure
    processed_dirs = set()
    
    # First, add index.md if it exists
    index_file = docs_path / "index.md"
    if index_file.exists():
        nav_content += "* [Home](index.md)\n"
    
    # Process all other files
    for md_file in md_files:
        rel_path = md_file.relative_to(docs_path)
        
        # Skip if in wcrp-content (will be auto-generated)
        if str(rel_path).startswith(OUTPUT_BASE):
            continue
        
        # Skip index.md (already added)
        if str(rel_path) == "index.md":
            continue
        
        # Skip hidden files
        if any(part.startswith('.') for part in rel_path.parts):
            continue
        
        parts = list(rel_path.parts)
        
        # Handle files in subdirectories
        if len(parts) > 1:
            # Build directory hierarchy
            current_dir = ""
            for i, dir_part in enumerate(parts[:-1]):
                parent_dir = current_dir
                current_dir = "/".join(parts[:i+1])
                
                if current_dir not in processed_dirs:
                    processed_dirs.add(current_dir)
                    indent = "    " * i
                    dir_title = clean_title_from_filename(dir_part)
                    nav_content += f"{indent}* {dir_title}\n"
            
            # Add the file
            indent = "    " * (len(parts) - 1)
            filename = parts[-1]
            title = clean_title_from_filename(filename)
            nav_content += f"{indent}* [{title}]({str(rel_path).replace(os.sep, '/')})\n"
        else:
            # Top-level file
            filename = parts[0]
            title = clean_title_from_filename(filename)
            nav_content += f"* [{title}]({filename})\n"
    
    # Add placeholder for WCRP generated content
    nav_content += "* [WCRP Content](wcrp-content/index.md)\n"
    
    # Write SUMMARY.md to docs directory
    summary_path = docs_path / "SUMMARY.md"
    with open(summary_path, 'w') as f:
        f.write(nav_content)
    
    print(f"âœ… Generated {summary_path}")
    print(f"   Found {len(md_files)} markdown files")


if __name__ == "__main__":
    scan_docs_and_generate_nav()

#!/usr/bin/env python3
"""
Simple navigation generator that writes SUMMARY.md directly
Run this as a separate script AFTER mkdocs has processed gen-files
"""

import os
import re
import json
from pathlib import Path

def clean_title(filename):
    """Clean filename for display."""
    name = filename.replace('.md', '')
    name = re.sub(r'^\d+[-_.](?=\w)', '', name)
    return name.replace('_', ' ').replace('-', ' ').title()

def get_sort_key(filename):
    """Get sort key for ordering."""
    match = re.match(r'^(\d+)[-_.]', filename)
    if match:
        return (int(match.group(1)), filename)
    return (0, filename)

def find_docs_dir():
    """Find the docs directory."""
    possible_paths = [
        Path("../../docs"),
        Path("docs"), 
        Path("../docs"),
        Path(".")
    ]
    
    for path in possible_paths:
        if path.exists() and path.is_dir():
            return path
    
    return Path("../../docs")  # Default

def main():
    """Generate navigation including virtual src-data files."""
    docs_path = find_docs_dir()
    print(f"ðŸ“‚ Generating navigation for: {docs_path.absolute()}")
    
    # Collect all markdown files
    files_by_dir = {}
    
    for md_file in docs_path.rglob("*.md"):
        if any(part.startswith('.') for part in md_file.parts):
            continue
        if md_file.name == "SUMMARY.md" or md_file.name.startswith("_"):
            continue
            
        rel_path = md_file.relative_to(docs_path)
        parts = list(rel_path.parts)
        
        if len(parts) == 1:
            if 'ROOT' not in files_by_dir:
                files_by_dir['ROOT'] = []
            files_by_dir['ROOT'].append(md_file)
        else:
            dir_name = parts[0]
            if dir_name not in files_by_dir:
                files_by_dir[dir_name] = []
            files_by_dir[dir_name].append(md_file)
    
    # Generate navigation
    nav_lines = []
    
    # Add top-level files
    if 'ROOT' in files_by_dir:
        root_files = sorted(files_by_dir['ROOT'], key=lambda f: get_sort_key(f.name))
        
        for f in root_files:
            if f.name == 'index.md':
                nav_lines.append('- [Home](index.md)')
                root_files.remove(f)
                break
        
        for f in root_files:
            title = clean_title(f.name)
            nav_lines.append(f'- [{title}]({f.name})')
    
    # Add subdirectories
    for dir_name in sorted(files_by_dir.keys()):
        if dir_name == 'ROOT':
            continue
            
        dir_title = clean_title(dir_name)
        nav_lines.append(f'- {dir_title}:')
        
        dir_files = sorted(files_by_dir[dir_name], key=lambda f: get_sort_key(f.name))
        for f in dir_files:
            rel_path = f.relative_to(docs_path)
            title = clean_title(f.name)
            nav_lines.append(f'  - [{title}]({str(rel_path).replace(os.sep, "/")})')
    
    # Always add src-data section if src-data folder exists
    src_data_path = None
    for check_path in [Path('src-data'), docs_path.parent / 'src-data', docs_path.parent.parent / 'src-data']:
        if check_path.exists():
            src_data_path = check_path
            break
    
    if src_data_path and src_data_path.is_dir():
        nav_lines.append('- Source Data:')
        nav_lines.append('  - [Overview](src-data-docs/index.md)')
        
        # Add sections based on src-data subfolders
        for subfolder in sorted(src_data_path.iterdir()):
            if subfolder.is_dir() and not subfolder.name.startswith('.'):
                section = subfolder.name
                nav_lines.append(f'  - [{clean_title(section)}](src-data-docs/{section}.md)')
                nav_lines.append(f'    - [Contents](src-data-docs/{section}_contents.md)')
    
    # Write SUMMARY.md
    summary_content = '\n'.join(nav_lines)
    summary_path = docs_path / 'SUMMARY.md'
    
    with open(summary_path, 'w') as f:
        f.write(summary_content)
    
    print(f"âœ… Generated {summary_path}")
    print(f"   Total entries: {len(nav_lines)}")
    if src_data_path:
        print(f"   âœ… Included src-data from: {src_data_path}")

if __name__ == "__main__":
    main()

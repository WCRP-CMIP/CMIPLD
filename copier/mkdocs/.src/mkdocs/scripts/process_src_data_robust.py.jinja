#!/usr/bin/env python3
"""
Robust src-data processor with extensive path checking
"""

import os
import sys
from pathlib import Path
import mkdocs_gen_files

print("\n" + "="*60, file=sys.stderr)
print("SRC-DATA PROCESSOR - ROBUST VERSION", file=sys.stderr)
print("="*60, file=sys.stderr)

# Get the actual working directory and script location
cwd = Path.cwd()
script_file = Path(__file__) if '__file__' in globals() else None

print(f"Working directory: {cwd}", file=sys.stderr)
if script_file:
    print(f"Script location: {script_file}", file=sys.stderr)
    print(f"Script parent: {script_file.parent}", file=sys.stderr)

# Try multiple strategies to find src-data
search_paths = [
    # Relative to current working directory
    cwd / "src-data",
    cwd.parent / "src-data",
    cwd.parent.parent / "src-data",
    
    # Absolute paths
    Path("src-data").resolve(),
    Path("../src-data").resolve(),
    Path("../../src-data").resolve(),
    
    # Relative to script location (if known)
]

if script_file:
    search_paths.extend([
        script_file.parent.parent.parent / "src-data",
        script_file.parent.parent.parent.parent / "src-data",
    ])

# Remove duplicates while preserving order
seen = set()
unique_paths = []
for path in search_paths:
    if path not in seen:
        seen.add(path)
        unique_paths.append(path)

print(f"\nSearching for src-data in {len(unique_paths)} locations:", file=sys.stderr)

src_data_path = None
for i, path in enumerate(unique_paths, 1):
    exists = path.exists()
    is_dir = path.is_dir() if exists else False
    print(f"  {i}. {path}: ", end="", file=sys.stderr)
    
    if exists and is_dir:
        print("‚úÖ FOUND!", file=sys.stderr)
        src_data_path = path
        break
    elif exists and not is_dir:
        print("‚ùå exists but is a file", file=sys.stderr)
    else:
        print("‚ùå not found", file=sys.stderr)

if not src_data_path:
    print("\n‚ùå No src-data directory found!", file=sys.stderr)
    print("\nCreating placeholder documentation...", file=sys.stderr)
    
    # Create placeholder so navigation doesn't break
    with mkdocs_gen_files.open("src-data-docs/not-found.md", "w") as f:
        f.write("""# Source Data Not Found

The `src-data` directory was not found in any of the expected locations.

## Expected Structure

Your project should have a `src-data` directory at the root level:

```
your-project/
‚îú‚îÄ‚îÄ mkdocs.yml
‚îú‚îÄ‚îÄ docs/
‚îú‚îÄ‚îÄ src-data/          <-- This directory is missing
‚îÇ   ‚îú‚îÄ‚îÄ subfolder1/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ README.md
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ files...
‚îÇ   ‚îî‚îÄ‚îÄ subfolder2/
‚îÇ       ‚îî‚îÄ‚îÄ files...
‚îî‚îÄ‚îÄ ...
```

## Checked Locations

The processor checked the following locations:
""")
        for path in unique_paths:
            f.write(f"- `{path}`\n")
    
    print("="*60, file=sys.stderr)
    sys.exit(0)

# Found src-data, now process it
print(f"\n‚úÖ Processing src-data at: {src_data_path}", file=sys.stderr)

# List all items in src-data
all_items = list(src_data_path.iterdir())
print(f"\nFound {len(all_items)} items in src-data:", file=sys.stderr)
for item in all_items:
    if item.is_dir():
        print(f"  üìÅ {item.name}/ (directory)", file=sys.stderr)
    else:
        print(f"  üìÑ {item.name} (file)", file=sys.stderr)

# Get subdirectories only
subdirs = [d for d in src_data_path.iterdir() if d.is_dir() and not d.name.startswith('.')]
print(f"\nFound {len(subdirs)} subdirectories to process:", file=sys.stderr)

if not subdirs:
    print("‚ö†Ô∏è  No subdirectories found in src-data!", file=sys.stderr)
    with mkdocs_gen_files.open("src-data-docs/empty.md", "w") as f:
        f.write("""# Source Data - Empty

The `src-data` directory exists but contains no subdirectories.

Please create subdirectories in `src-data/` with your data files.
""")
    sys.exit(0)

# Process each subdirectory
output_base = "src-data-docs"
sections = []

# Create index
print("\nCreating index page...", file=sys.stderr)
index_content = """# Source Data Documentation

This section contains documentation extracted from the `src-data` folder.

## Available Sections

| Section | Description | Files |
|---------|-------------|-------|
"""

for subdir in sorted(subdirs):
    folder_name = subdir.name
    print(f"\nüìÇ Processing '{folder_name}'...", file=sys.stderr)
    
    # Count files
    files = [f for f in subdir.iterdir() if f.is_file() and not f.name.startswith('.')]
    print(f"   Found {len(files)} files", file=sys.stderr)
    
    # Look for README
    readme_path = subdir / "README.md"
    readme_content = f"# {folder_name}\n\nDocumentation for {folder_name}."
    
    if readme_path.exists():
        try:
            with open(readme_path, 'r', encoding='utf-8') as f:
                readme_content = f.read()
            print(f"   ‚úÖ Found README.md", file=sys.stderr)
        except Exception as e:
            print(f"   ‚ùå Error reading README.md: {e}", file=sys.stderr)
    
    # Create main page
    with mkdocs_gen_files.open(f"{output_base}/{folder_name}.md", "w") as f:
        f.write(readme_content)
    print(f"   ‚úÖ Created {folder_name}.md", file=sys.stderr)
    
    # Create contents page
    contents = f"""# {folder_name} - Contents

## Files in this section

| File | Size | Type |
|------|------|------|
"""
    
    for file in sorted(files):
        size = file.stat().st_size
        size_str = f"{size:,} bytes"
        file_type = file.suffix or "no extension"
        contents += f"| {file.name} | {size_str} | {file_type} |\n"
    
    with mkdocs_gen_files.open(f"{output_base}/{folder_name}_contents.md", "w") as f:
        f.write(contents)
    print(f"   ‚úÖ Created {folder_name}_contents.md", file=sys.stderr)
    
    # Add to index
    desc = f"{len(files)} files"
    index_content += f"| [{folder_name}]({folder_name}.md) | {desc} | [View contents]({folder_name}_contents.md) |\n"
    sections.append(folder_name)

# Write index
with mkdocs_gen_files.open(f"{output_base}/index.md", "w") as f:
    f.write(index_content)

print(f"\n‚úÖ Successfully processed {len(sections)} sections", file=sys.stderr)
print(f"Sections: {sections}", file=sys.stderr)
print("="*60, file=sys.stderr)

# Also create a marker file to verify gen-files is working
with mkdocs_gen_files.open("src-data-marker.md", "w") as f:
    f.write("# Src-Data Marker\n\nThis file confirms gen-files processed src-data.")

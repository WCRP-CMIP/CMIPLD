#!/usr/bin/env python3
"""
Enhanced MkDocs sync script with README integration and JSON generation.
"""
import json
import subprocess
import shutil
import os
from pathlib import Path


def read_readme_content():
    """Read README.md content or return fallback message."""
    readme_files = ['README.md', 'readme.md', 'Readme.md', 'README.rst', 'readme.rst']
    
    for readme_file in readme_files:
        readme_path = Path(readme_file)
        if readme_path.exists():
            try:
                with open(readme_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Clean up the README content for MkDocs
                # Remove any existing title if it matches project name
                lines = content.split('\n')
                cleaned_lines = []
                skip_first_title = False
                
                for i, line in enumerate(lines):
                    # Skip first H1 title if it looks like a project title
                    if i == 0 and line.startswith('# '):
                        title = line[2:].strip()
                        # If title contains common project indicators, skip it
                        if any(word in title.lower() for word in ['documentation', 'docs', 'project', 'readme']):
                            skip_first_title = True
                            continue
                    
                    # Skip empty lines after skipped title
                    if skip_first_title and not line.strip():
                        if not cleaned_lines:  # Only skip leading empty lines
                            continue
                    
                    cleaned_lines.append(line)
                
                cleaned_content = '\n'.join(cleaned_lines).strip()
                
                print(f"‚úÖ Found and loaded content from {readme_file}")
                return cleaned_content
                
            except Exception as e:
                print(f"‚ö†Ô∏è  Error reading {readme_file}: {e}")
                continue
    
    print("‚ö†Ô∏è  No README.md found")
    return "Content not found, enter manually here"


def get_git_info():
    """Get git repository information."""
    git_info = {}
    try:
        # Get remote URL
        result = subprocess.run(['git', 'remote', 'get-url', 'origin'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            remote_url = result.stdout.strip()
            git_info['remote_url'] = remote_url
            
            # Extract GitHub info from URL
            if 'github.com' in remote_url:
                if remote_url.startswith('https://github.com/'):
                    repo_path = remote_url.replace('https://github.com/', '').replace('.git', '')
                elif remote_url.startswith('git@github.com:'):
                    repo_path = remote_url.replace('git@github.com:', '').replace('.git', '')
                else:
                    repo_path = None
                
                if repo_path and '/' in repo_path:
                    username, repo = repo_path.split('/', 1)
                    git_info['github_username'] = username
                    git_info['github_repo'] = repo
                    git_info['github_url'] = f"https://github.com/{username}/{repo}"
                    git_info['github_pages_url'] = f"https://{username}.github.io/{repo}/"
        
        # Get current branch
        result = subprocess.run(['git', 'branch', '--show-current'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            git_info['current_branch'] = result.stdout.strip()
        
        # Get commit info
        result = subprocess.run(['git', 'log', '-1', '--format=%H %s'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            commit_line = result.stdout.strip()
            if commit_line:
                commit_hash, commit_msg = commit_line.split(' ', 1)
                git_info['last_commit'] = commit_hash[:8]
                git_info['last_commit_msg'] = commit_msg
        
    except (subprocess.CalledProcessError, FileNotFoundError):
        pass
    
    return git_info


def sync_from_mipcvs_wiki():
    """Clone or update mipcvs-wiki and copy content."""
    print("üîÑ Syncing from mipcvs-wiki...")
    
    # Clone or update mipcvs-wiki
    if not Path("mipcvs-wiki").exists():
        print("üì• Cloning mipcvs-wiki...")
        subprocess.run(["git", "clone", "https://github.com/cmip-ipo/mipcvs-wiki.git"])
    else:
        print("üîÑ Updating mipcvs-wiki...")
        subprocess.run(["git", "pull"], cwd="mipcvs-wiki")

    # Copy content
    if Path("docs").exists():
        shutil.rmtree("docs")
    shutil.copytree("mipcvs-wiki/docs", "docs")
    print("üìÅ Copied docs/ directory")
    
    # Verify assets are accessible
    logo_path = Path("docs/assets/CMIP_Icon_CMYK_negative.svg")
    if logo_path.exists():
        print(f"‚úÖ Logo found at: {logo_path}")
    else:
        print(f"‚ö†Ô∏è  Logo not found at: {logo_path}")
        # Try to find it elsewhere
        for asset_file in Path("docs").rglob("CMIP_Icon_CMYK_negative.svg"):
            print(f"üîç Found logo at: {asset_file}")
        
        # If still not found, try to copy from template fallback
        template_logo = Path(".src/mkdocs/assets/CMIP_Icon_CMYK_negative.svg")
        if template_logo.exists():
            # Ensure docs/assets directory exists
            Path("docs/assets").mkdir(parents=True, exist_ok=True)
            shutil.copy2(template_logo, logo_path)
            print(f"üíæ Copied logo from template to: {logo_path}")

    # Get git info for better defaults
    git_info = get_git_info()
    
    # Copy mkdocs.yml and update with smart defaults
    with open("mipcvs-wiki/mkdocs.yml") as f:
        config = f.read()

    # Update site name
    project_name = "{{ project_name }}"
    config = config.replace("site_name: MIP-CVs Documentation", f"site_name: {project_name}")
    
    # Add URLs at the top
    site_url = "{{ site_url }}"
    repo_url = "{{ repo_url }}"
    
    # Use git info if available for better URLs
    if git_info.get('github_pages_url'):
        print(f"üîç Detected GitHub Pages URL: {git_info['github_pages_url']}")
    if git_info.get('github_url'):
        print(f"üîç Detected GitHub repo: {git_info['github_url']}")
    
    config = f"site_url: {site_url}\nrepo_url: {repo_url}\n" + config

    with open("mkdocs.yml", "w") as f:
        f.write(config)
    print("‚öôÔ∏è  Updated mkdocs.yml")

    # Copy overrides if they exist
    if Path("mipcvs-wiki/overrides").exists():
        if Path("overrides").exists():
            shutil.rmtree("overrides")
        shutil.copytree("mipcvs-wiki/overrides", "overrides")
        print("üé® Copied theme overrides")
    
    # Create/update index.md with README content
    create_index_page()
    
    # Show git info if detected
    if git_info:
        print("üìä Git repository info detected:")
        for key, value in git_info.items():
            print(f"   {key}: {value}")


def create_index_page():
    """Create or update index.md with README content."""
    print("üìÑ Creating index.md from README...")
    
    # Read README content
    readme_content = read_readme_content()
    
    # Create index.md content
    index_content = f"""---
title: Home
description: {{ description }}
---

# {{ project_name }}

{readme_content}

## Quick Links

- **Repository**: [{{ repo_url }}]({{ repo_url }})
- **Documentation**: [{{ site_url }}]({{ site_url }})
- **Author**: {{ author_name }} <{{ author_email }}>

## Generated Content

This documentation site includes:

- Content from [mipcvs-wiki](https://github.com/cmip-ipo/mipcvs-wiki)
- Auto-generated pages from JSON files in `{{ json_data_folder }}/`
- Custom documentation and guides

## Contributing

To contribute to this documentation:

1. Edit the source files in the repository
2. For auto-generated content, modify the JSON files in `{{ json_data_folder }}/`
3. Run `python scripts/sync.py` to update the site
4. Submit pull requests with your changes

---

*This site is automatically generated using MkDocs and updated from the source repository.*
"""
    
    # Write index.md
    docs_path = Path("docs")
    docs_path.mkdir(exist_ok=True)
    
    index_path = docs_path / "index.md"
    with open(index_path, 'w', encoding='utf-8') as f:
        f.write(index_content)
    
    print(f"üìù Created docs/index.md with README content")


def generate_pages_from_json(json_folder="{{ json_data_folder }}", output_folder="docs/generated"):
    """Generate markdown pages from JSON files in a folder."""
    json_path = Path(json_folder)
    output_path = Path(output_folder)
    
    if not json_path.exists():
        print(f"‚ö†Ô∏è  JSON folder not found: {json_folder}")
        return
    
    print(f"üìù Generating pages from JSON files in {json_folder}...")
    
    # Create output directory
    output_path.mkdir(parents=True, exist_ok=True)
    
    # Find all JSON files
    json_files = list(json_path.glob("*.json"))
    
    if not json_files:
        print(f"‚ö†Ô∏è  No JSON files found in {json_folder}")
        return
    
    generated_pages = []
    
    for json_file in json_files:
        try:
            # Read JSON file
            with open(json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # Generate filename
            page_name = json_file.stem
            md_file = output_path / f"{page_name}.md"
            
            # Generate markdown content
            markdown_content = generate_markdown_from_json(data, page_name, json_file)
            
            # Write markdown file
            with open(md_file, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            
            generated_pages.append(page_name)
            print(f"‚úÖ Generated: {md_file}")
            
        except Exception as e:
            print(f"‚ùå Error processing {json_file}: {e}")
    
    # Generate index page for all generated pages
    if generated_pages:
        generate_index_page(output_path, generated_pages, json_folder)
    
    print(f"üìù Generated {len(generated_pages)} pages from JSON files")


def generate_markdown_from_json(data, page_name, source_file):
    """Convert JSON data to markdown format."""
    # Clean up page name for title
    title = page_name.replace('_', ' ').replace('-', ' ').title()
    
    # Get file info
    file_size = source_file.stat().st_size
    file_size_str = f"{file_size:,} bytes" if file_size < 1024 else f"{file_size/1024:.1f} KB"
    
    markdown = f"""---
title: {title}
description: Generated from {page_name}.json
tags:
  - generated
  - json-data
  - {{ project_name.lower().replace(' ', '-') }}
generated_from: {source_file.name}
file_size: {file_size_str}
---

# {title}

This page was automatically generated from `{source_file.name}` ({file_size_str}).

## Data Overview

"""
    
    # Add data summary
    if isinstance(data, dict):
        markdown += f"- **Type**: Dictionary\n"
        markdown += f"- **Keys**: {len(data)}\n"
        if data:
            key_list = list(data.keys())[:10]  # Show first 10 keys
            more_keys = len(data) - len(key_list)
            keys_display = ", ".join(f"`{k}`" for k in key_list)
            if more_keys > 0:
                keys_display += f" and {more_keys} more..."
            markdown += f"- **Key names**: {keys_display}\n"
    elif isinstance(data, list):
        markdown += f"- **Type**: Array\n"
        markdown += f"- **Items**: {len(data)}\n"
        if data:
            item_types = list(set(type(item).__name__ for item in data[:10]))
            markdown += f"- **Item types**: {', '.join(item_types)}\n"
    else:
        markdown += f"- **Type**: {type(data).__name__}\n"
        markdown += f"- **Value**: {str(data)[:100]}{'...' if len(str(data)) > 100 else ''}\n"
    
    markdown += "\n"
    
    # Add structured data view for dictionaries
    if isinstance(data, dict) and len(data) > 0:
        markdown += "## Data Fields\n\n"
        markdown += "| Field | Type | Value/Description |\n"
        markdown += "|-------|------|-------------------|\n"
        
        for key, value in list(data.items())[:20]:  # Limit to first 20 fields
            value_type = type(value).__name__
            if isinstance(value, (str, int, float, bool)):
                value_display = str(value)[:50] + ("..." if len(str(value)) > 50 else "")
                value_display = value_display.replace('|', '\\|')  # Escape pipes for markdown
            elif isinstance(value, (list, dict)):
                item_count = len(value) if hasattr(value, '__len__') else 'N/A'
                value_display = f"{item_count} items"
            else:
                value_display = f"{value_type} object"
            
            markdown += f"| `{key}` | {value_type} | {value_display} |\n"
        
        if len(data) > 20:
            markdown += f"\n*Showing first 20 of {len(data)} fields*\n"
        markdown += "\n"
    
    # Add formatted JSON content
    markdown += "## Raw JSON Data\n\n"
    markdown += "```json\n"
    try:
        # Pretty print with reasonable limits
        if isinstance(data, (dict, list)) and len(str(data)) > 10000:
            # For very large data, show a truncated version
            markdown += json.dumps(data, indent=2, ensure_ascii=False)[:5000]
            markdown += "\n... (truncated for display)\n"
        else:
            markdown += json.dumps(data, indent=2, ensure_ascii=False)
    except Exception:
        markdown += str(data)
    markdown += "\n```\n\n"
    
    # Add metadata footer
    markdown += "---\n\n"
    markdown += f"**Generated**: Automatically from `{source_file.name}`  \n"
    markdown += f"**Project**: {{ project_name }}  \n"
    markdown += f"**Size**: {file_size_str}  \n"
    
    return markdown


def generate_index_page(output_path, generated_pages, json_folder):
    """Generate an index page listing all generated pages."""
    index_file = output_path / "index.md"
    
    markdown = f"""---
title: Generated Data Pages
description: Index of pages generated from JSON files in {json_folder}
tags:
  - generated
  - index
  - {{ project_name.lower().replace(' ', '-') }}
---

# Generated Data Pages

This section contains pages automatically generated from JSON files in the `{json_folder}/` directory.

## Available Pages ({len(generated_pages)})

"""
    
    for page_name in sorted(generated_pages):
        title = page_name.replace('_', ' ').replace('-', ' ').title()
        markdown += f"- **[{title}]({page_name}.md)** - Generated from `{page_name}.json`\n"
    
    markdown += f"\n## About\n\n"
    markdown += f"These pages are automatically generated from JSON data files using the {{ project_name }} build system. "
    markdown += f"To regenerate these pages, run:\n\n"
    markdown += f"```bash\n"
    markdown += f"python scripts/sync.py generate {json_folder}\n"
    markdown += f"```\n\n"
    markdown += "---\n\n"
    markdown += "*This index was automatically generated.*\n"
    
    with open(index_file, 'w', encoding='utf-8') as f:
        f.write(markdown)
    
    print(f"üìã Generated index page: {index_file}")


def main():
    """Main function with git detection and README integration."""
    import sys
    
    # Show git info at start
    git_info = get_git_info()
    if git_info:
        print("üîç Git repository detected:")
        for key, value in git_info.items():
            print(f"   {key}: {value}")
        print()
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "sync":
            sync_from_mipcvs_wiki()
        elif command == "generate":
            json_folder = sys.argv[2] if len(sys.argv) > 2 else "{{ json_data_folder }}"
            generate_pages_from_json(json_folder)
        elif command == "index":
            create_index_page()
        elif command == "all":
            sync_from_mipcvs_wiki()
            json_folder = sys.argv[2] if len(sys.argv) > 2 else "{{ json_data_folder }}"
            generate_pages_from_json(json_folder)
        elif command == "info":
            print("üìä Repository information:")
            if git_info:
                for key, value in git_info.items():
                    print(f"   {key}: {value}")
            else:
                print("   No git repository detected")
        else:
            print("Usage:")
            print("  python sync.py sync                    # Sync from mipcvs-wiki")
            print("  python sync.py generate [folder]      # Generate pages from JSON")
            print("  python sync.py index                  # Create index.md from README")
            print("  python sync.py all [folder]           # Do both sync and generate")
            print("  python sync.py info                   # Show git repository info")
            sys.exit(1)
    else:
        # Default: do both
        sync_from_mipcvs_wiki()
        generate_pages_from_json()


if __name__ == "__main__":
    main()

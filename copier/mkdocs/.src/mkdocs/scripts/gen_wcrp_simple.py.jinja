#!/usr/bin/env python3
"""
Simplified WCRP content generator that ensures all files appear in navigation
"""

import mkdocs_gen_files
import sys
import re
from pathlib import Path
from datetime import datetime
import json
import os

print("🚀 WCRP content generator started (simplified)", file=sys.stderr)

# Configuration
OUTPUT_BASE = "wcrp-content"
DOCS_DIR = "../../docs"


def clean_title(filename):
    """Clean filename for display."""
    name = filename.replace('.md', '')
    # Only remove numbers if followed by separator
    name = re.sub(r'^\d+[-_.](?=\w)', '', name)
    return name.replace('_', ' ').replace('-', ' ').title()


def get_sort_key(filename):
    """Get sort key for ordering."""
    match = re.match(r'^(\d+)[-_.]', filename)
    if match:
        return (int(match.group(1)), filename)
    return (0, filename)


def main():
    """Generate navigation including all existing files."""
    docs_path = Path(DOCS_DIR)
    
    # Build simple flat list of all files
    all_files = []
    
    if docs_path.exists():
        print(f"📂 Scanning: {docs_path.absolute()}", file=sys.stderr)
        
        # Get all markdown files
        for md_file in docs_path.rglob("*.md"):
            # Skip hidden files
            if any(part.startswith('.') for part in md_file.parts):
                continue
                
            rel_path = md_file.relative_to(docs_path)
            
            # Skip generated content
            if str(rel_path).startswith(OUTPUT_BASE):
                continue
            
            all_files.append(rel_path)
            print(f"  Found: {rel_path}", file=sys.stderr)
    
    # Sort files
    all_files.sort(key=lambda f: get_sort_key(f.name))
    
    # Generate navigation
    nav_lines = []
    
    # Add home if exists
    if Path("index.md") in all_files:
        nav_lines.append("- [Home](index.md)")
        all_files.remove(Path("index.md"))
    
    # Add all other files (flat list for now)
    for file_path in all_files:
        title = clean_title(file_path.name)
        nav_lines.append(f"- [{title}]({str(file_path).replace(os.sep, '/')})")
        print(f"  Added: {file_path} as '{title}'", file=sys.stderr)
    
    # Add WCRP generated content section
    nav_lines.append("- [WCRP Content](wcrp-content/index.md)")
    
    # Generate some mock WCRP content
    mock_content = """# WCRP Content

This section contains generated content from WCRP-CMIP.

## Available Sections

- Projects
- News
- Activities
"""
    
    with mkdocs_gen_files.open(f"{OUTPUT_BASE}/index.md", "w") as f:
        f.write(mock_content)
    
    # Write SUMMARY.md
    nav_content = "\n".join(nav_lines) + "\n"
    
    # Write to actual file system
    summary_path = docs_path / "SUMMARY.md"
    try:
        summary_path.parent.mkdir(parents=True, exist_ok=True)
        with open(summary_path, 'w') as f:
            f.write(nav_content)
        print(f"\n✅ Wrote {len(nav_lines)} items to {summary_path.absolute()}", file=sys.stderr)
    except Exception as e:
        print(f"❌ Error writing SUMMARY.md: {e}", file=sys.stderr)
    
    print("\n📋 Navigation preview:", file=sys.stderr)
    print("-" * 40, file=sys.stderr)
    for line in nav_lines[:10]:
        print(line, file=sys.stderr)
    if len(nav_lines) > 10:
        print("...", file=sys.stderr)
    print("-" * 40, file=sys.stderr)


if __name__ == "__main__":
    main()

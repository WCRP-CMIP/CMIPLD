#!/usr/bin/env python3
"""
Process src-data and write a marker file to track what was generated
"""

import os
import sys
import json
from pathlib import Path
import mkdocs_gen_files

def process_src_data():
    """Process src-data folder and generate documentation."""
    src_data_path = Path("src-data")
    
    if not src_data_path.exists():
        print("‚ÑπÔ∏è  No src-data folder found, skipping", file=sys.stderr)
        return
    
    print(f"üìÅ Processing src-data folder: {src_data_path.absolute()}", file=sys.stderr)
    
    output_base = "src-data-docs"
    sections = []
    
    # Create index page
    index_content = """# Source Data Documentation

This section contains documentation extracted from the `src-data` folder.

## Available Sections

"""
    
    # Process each subfolder
    for subfolder in sorted(src_data_path.iterdir()):
        if not subfolder.is_dir() or subfolder.name.startswith('.'):
            continue
            
        folder_name = subfolder.name
        print(f"  üìÇ Processing subfolder: {folder_name}", file=sys.stderr)
        sections.append(folder_name)
        
        # Extract README.md
        readme_path = subfolder / "README.md"
        readme_content = f"# {folder_name}\n\nNo README.md found for this section."
        if readme_path.exists():
            with open(readme_path, 'r', encoding='utf-8') as f:
                readme_content = f.read()
        
        # Write README content
        with mkdocs_gen_files.open(f"{output_base}/{folder_name}.md", "w") as f:
            f.write(readme_content)
        
        # Process context file
        context_content = ""
        context_files = list(subfolder.glob("*context*"))
        if context_files:
            try:
                with open(context_files[0], 'r', encoding='utf-8') as f:
                    context_content = f.read()
            except:
                pass
        
        # Create contents page
        contents_page = f"""# {folder_name} - Contents

## Context

"""
        
        if context_content:
            contents_page += "```\n" + context_content + "\n```\n\n"
        else:
            contents_page += "_No context file found._\n\n"
        
        # List files
        contents_page += "## Files\n\n"
        contents_page += "| File | Type | Size | Link |\n"
        contents_page += "|------|------|------|------|\n"
        
        files = []
        for file in sorted(subfolder.iterdir()):
            if file.is_file() and not file.name.startswith('.'):
                file_size = file.stat().st_size
                file_type = file.suffix[1:] if file.suffix else "file"
                
                if file_size < 1024:
                    size_str = f"{file_size} B"
                elif file_size < 1024 * 1024:
                    size_str = f"{file_size / 1024:.1f} KB"
                else:
                    size_str = f"{file_size / (1024 * 1024):.1f} MB"
                
                link = f"[View](../../src-data/{subfolder.name}/{file.name})"
                contents_page += f"| {file.name} | {file_type} | {size_str} | {link} |\n"
                files.append(file.name)
        
        contents_page += f"\n\n---\n_Total files: {len(files)}_\n"
        
        # Write contents page
        with mkdocs_gen_files.open(f"{output_base}/{folder_name}_contents.md", "w") as f:
            f.write(contents_page)
        
        # Update index
        index_content += f"- **[{folder_name}]({folder_name}.md)** "
        index_content += f"[[Contents]({folder_name}_contents.md)]\n"
    
    # Write index
    with mkdocs_gen_files.open(f"{output_base}/index.md", "w") as f:
        f.write(index_content)
    
    # Write a marker file with the sections info
    marker_data = {
        "generated": True,
        "sections": sections,
        "count": len(sections)
    }
    with mkdocs_gen_files.open(f"{output_base}/.generated.json", "w") as f:
        json.dump(marker_data, f)
    
    print(f"‚úÖ Processed {len(sections)} subfolders", file=sys.stderr)

# Run the processor
process_src_data()

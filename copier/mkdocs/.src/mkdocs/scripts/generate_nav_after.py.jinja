#!/usr/bin/env python3
"""
Navigation generator that runs AFTER src-data processing
This is called as the second gen-files script
"""

import mkdocs_gen_files
import os
import sys
import re
from pathlib import Path

def clean_title(filename):
    """Clean filename for display."""
    name = filename.replace('.md', '')
    name = re.sub(r'^\d+[-_.](?=\w)', '', name)
    return name.replace('_', ' ').replace('-', ' ').title()

def get_sort_key(filename):
    """Get sort key for ordering."""
    match = re.match(r'^(\d+)[-_.]', filename)
    if match:
        return (int(match.group(1)), filename)
    return (0, filename)

def generate_navigation():
    """Generate SUMMARY.md with all content including src-data."""
    print("üìù Generating navigation (after src-data processing)...", file=sys.stderr)
    
    docs_path = Path("../../docs")
    
    if not docs_path.exists():
        print("‚ö†Ô∏è  Docs directory not found", file=sys.stderr)
        return
    
    # Collect all files including generated ones
    files_by_dir = {}
    
    for md_file in docs_path.rglob("*.md"):
        if any(part.startswith('.') for part in md_file.parts):
            continue
        if md_file.name == "SUMMARY.md" or md_file.name.startswith("_"):
            continue
            
        rel_path = md_file.relative_to(docs_path)
        parts = list(rel_path.parts)
        
        if len(parts) == 1:
            if 'ROOT' not in files_by_dir:
                files_by_dir['ROOT'] = []
            files_by_dir['ROOT'].append(md_file)
        else:
            dir_name = parts[0]
            if dir_name not in files_by_dir:
                files_by_dir[dir_name] = []
            files_by_dir[dir_name].append(md_file)
    
    # Generate navigation
    nav_lines = []
    
    # Add top-level files
    if 'ROOT' in files_by_dir:
        root_files = sorted(files_by_dir['ROOT'], key=lambda f: get_sort_key(f.name))
        
        # Add index.md first
        for f in root_files:
            if f.name == 'index.md':
                nav_lines.append('- [Home](index.md)')
                root_files.remove(f)
                break
        
        # Add other root files
        for f in root_files:
            title = clean_title(f.name)
            nav_lines.append(f'- [{title}]({f.name})')
    
    # Add subdirectories
    for dir_name in sorted(files_by_dir.keys()):
        if dir_name == 'ROOT':
            continue
            
        # Handle src-data-docs specially
        if dir_name == 'src-data-docs':
            nav_lines.append('- Source Data:')
            
            # Find index
            src_files = files_by_dir[dir_name]
            for f in src_files:
                if f.name == 'index.md':
                    nav_lines.append('  - [Overview](src-data-docs/index.md)')
                    break
            
            # Add sections
            sections = set()
            for f in src_files:
                if f.name != 'index.md' and not f.name.endswith('_contents.md'):
                    sections.add(f.stem)
            
            for section in sorted(sections):
                nav_lines.append(f'  - [{clean_title(section)}](src-data-docs/{section}.md)')
                # Check if contents file exists
                if any(f.name == f'{section}_contents.md' for f in src_files):
                    nav_lines.append(f'    - [Contents](src-data-docs/{section}_contents.md)')
        else:
            # Regular directory
            dir_title = clean_title(dir_name)
            nav_lines.append(f'- {dir_title}:')
            
            dir_files = sorted(files_by_dir[dir_name], key=lambda f: get_sort_key(f.name))
            for f in dir_files:
                rel_path = f.relative_to(docs_path)
                title = clean_title(f.name)
                nav_lines.append(f'  - [{title}]({str(rel_path).replace(os.sep, "/")})')
    
    # Write SUMMARY.md
    summary_content = '\n'.join(nav_lines)
    summary_path = docs_path / 'SUMMARY.md'
    
    with open(summary_path, 'w') as f:
        f.write(summary_content)
    
    print(f"‚úÖ Generated {summary_path} with {len(nav_lines)} entries", file=sys.stderr)

# Run when imported
generate_navigation()

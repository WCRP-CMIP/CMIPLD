#!/usr/bin/env python3
"""
Pre-build script to generate SUMMARY.md for literate-nav
Run this BEFORE mkdocs build/serve
"""

import os
from pathlib import Path
import re

def clean_title(filename):
    """Clean filename for display."""
    name = filename.replace('.md', '')
    # Only remove leading numbers if followed by separator
    name = re.sub(r'^\d+[-_.](?=\w)', '', name)
    return name.replace('_', ' ').replace('-', ' ').title()

def get_sort_key(filename):
    """Get sort key for ordering."""
    match = re.match(r'^(\d+)[-_.]', filename)
    if match:
        return (int(match.group(1)), filename)
    return (0, filename)

def generate_summary():
    """Generate SUMMARY.md file."""
    # Find docs directory
    docs_dir = Path("../../docs")
    if not docs_dir.exists():
        docs_dir = Path("docs")
    if not docs_dir.exists():
        print("Error: Cannot find docs directory")
        return
    
    print(f"Generating SUMMARY.md in {docs_dir.absolute()}")
    
    # Collect all markdown files
    files_by_dir = {}
    
    for md_file in docs_dir.rglob("*.md"):
        # Skip hidden files and SUMMARY.md
        if any(part.startswith('.') for part in md_file.parts):
            continue
        if md_file.name == "SUMMARY.md":
            continue
        if md_file.name.startswith("_"):  # Skip _nav_debug.md etc
            continue
            
        rel_path = md_file.relative_to(docs_dir)
        parts = list(rel_path.parts)
        
        if len(parts) == 1:
            # Top-level file
            if 'ROOT' not in files_by_dir:
                files_by_dir['ROOT'] = []
            files_by_dir['ROOT'].append(md_file)
        else:
            # File in subdirectory
            dir_name = parts[0]
            if dir_name not in files_by_dir:
                files_by_dir[dir_name] = []
            files_by_dir[dir_name].append(md_file)
    
    # Generate navigation
    nav_lines = []
    
    # Add top-level files first
    if 'ROOT' in files_by_dir:
        # Sort by sort key
        root_files = sorted(files_by_dir['ROOT'], key=lambda f: get_sort_key(f.name))
        
        # Add index.md first if it exists
        for f in root_files:
            if f.name == 'index.md':
                nav_lines.append('- [Home](index.md)')
                root_files.remove(f)
                break
        
        # Add other root files
        for f in root_files:
            title = clean_title(f.name)
            nav_lines.append(f'- [{title}]({f.name})')
    
    # Add subdirectories
    for dir_name in sorted(files_by_dir.keys()):
        if dir_name == 'ROOT':
            continue
            
        # Add directory header
        dir_title = clean_title(dir_name)
        nav_lines.append(f'- {dir_title}:')
        
        # Add files in directory
        dir_files = sorted(files_by_dir[dir_name], key=lambda f: get_sort_key(f.name))
        for f in dir_files:
            rel_path = f.relative_to(docs_dir)
            title = clean_title(f.name)
            nav_lines.append(f'  - [{title}]({str(rel_path).replace(os.sep, "/")})')
    
    # Write SUMMARY.md
    summary_content = '\n'.join(nav_lines)
    summary_path = docs_dir / 'SUMMARY.md'
    
    with open(summary_path, 'w') as f:
        f.write(summary_content)
    
    print(f"\nâœ… Generated {summary_path}")
    print(f"   Total files: {sum(len(files) for files in files_by_dir.values())}")
    print("\nPreview:")
    print("-" * 40)
    for line in nav_lines[:15]:
        print(line)
    if len(nav_lines) > 15:
        print("...")
    print("-" * 40)

if __name__ == "__main__":
    generate_summary()

#!/usr/bin/env python3
"""
Hook to parse external-links.md and add external links to navigation.
Supports nested folders for organizing links.
"""

import re
from pathlib import Path

def parse_external_links(docs_dir):
    """Parse external-links.md file and extract links with folder organization."""
    external_links_path = docs_dir / 'external-links.md'
    
    if not external_links_path.exists():
        return []
    
    try:
        with open(external_links_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Parse content line by line to support folder organization
        lines = content.split('\n')
        links = []
        current_folder = None
        
        for line in lines:
            line = line.strip()
            
            # Skip empty lines and comments
            if not line or line.startswith('#'):
                continue
            
            # Check for folder headers (## Folder Name)
            if line.startswith('## ') and not line.startswith('## Format') and not line.startswith('## Example') and not line.startswith('## Instructions'):
                current_folder = line[3:].strip()  # Remove '## '
                continue
            
            # Extract markdown links: [Title](URL)
            link_match = re.match(r'^-?\s*\[([^\]]+)\]\(([^)]+)\)', line)
            if link_match:
                title = link_match.group(1).strip()
                url = link_match.group(2).strip()
                
                # Skip internal links (relative paths) and template variables
                if not url.startswith(('http://', 'https://')) or '{{' in url:
                    continue
                
                link_info = {
                    'title': title,
                    'url': url,
                    'folder': current_folder
                }
                links.append(link_info)
        
        print(f"‚úÖ Found {len(links)} external links")
        if current_folder:
            folders = set(link['folder'] for link in links if link['folder'])
            print(f"üìÅ Organized in {len(folders)} folders: {', '.join(folders)}")
        
        return links
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Error parsing external-links.md: {e}")
        return []

def add_external_links_to_nav(nav_lines, external_links):
    """Add external links section to navigation with folder support."""
    if not external_links:
        return nav_lines
    
    # Organize links by folder
    folders = {}
    root_links = []
    
    for link in external_links:
        if link['folder']:
            if link['folder'] not in folders:
                folders[link['folder']] = []
            folders[link['folder']].append(link)
        else:
            root_links.append(link)
    
    # Add external links section
    if root_links or folders:
        nav_lines.append('- External Links:')
        
        # Add root-level links first
        for link in root_links:
            nav_lines.append(f'  - [{link["title"]}]({link["url"]})')
        
        # Add organized folders
        for folder_name in sorted(folders.keys()):
            nav_lines.append(f'  - {folder_name}:')
            for link in folders[folder_name]:
                nav_lines.append(f'    - [{link["title"]}]({link["url"]})')
    
    return nav_lines
